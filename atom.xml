<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vito&#39;s TecH sTacK</title>
  <subtitle>Life is short, why you become a developer?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.vitostack.com/"/>
  <updated>2016-05-22T05:25:20.000Z</updated>
  <id>http://www.vitostack.com/</id>
  
  <author>
    <name>Vito</name>
    <email>vito2015@live.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python“不为人知的”特性</title>
    <link href="http://www.vitostack.com/2016/05/22/python-unknown-feature/"/>
    <id>http://www.vitostack.com/2016/05/22/python-unknown-feature/</id>
    <published>2016-05-22T05:15:50.000Z</published>
    <updated>2016-05-22T05:25:20.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;链式比较操作&quot;&gt;&lt;a href=&quot;#链式比较操作&quot; class=&quot;headerlink&quot; title=&quot;链式比较操作&quot;&gt;&lt;/a&gt;链式比较操作&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;lt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;lt; x*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;gt; x &amp;lt;= &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; == x &amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能认为它执行的过程先是：&lt;code&gt;1 &amp;lt; x&lt;/code&gt;，返回True，然后再比较&lt;code&gt;True &amp;lt; 10&lt;/code&gt;,当然这么做也是返回True,比较表达式&lt;code&gt;True &amp;lt; 10&lt;/code&gt;,因为解释器会把True转换成1，False转换成0。但这里的链式比较解释器在内部并不是这样干的，它会把这种链式的比较操作转换成：&lt;code&gt;1 &amp;lt; x and x &amp;lt; 10&lt;/code&gt;，不信你可以看看最后一个例子。这样的链式操作本可以值得所有编程语言拥有，但是很遗憾，其他语言很少有这样的支持。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;enumerate枚举&quot;&gt;&lt;a href=&quot;#enumerate枚举&quot; class=&quot;headerlink&quot; title=&quot;enumerate枚举&quot;&gt;&lt;/a&gt;enumerate枚举&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index, item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(a): &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; index, item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用enumerate包装一个可迭代对象，可以同时使用迭代项和索引，在迭代的同时获取迭代项所在位置时非常方便。如果你不这么干的话，下面有一种比较麻烦的方法：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(a)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i, a[i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;enumerate 还可以接收一个可选参数start，默认start等于0。&lt;code&gt;enumerate(list, start=1)&lt;/code&gt;，这样index的起始值就是1&lt;/p&gt;
&lt;h2 id=&quot;生成器对象&quot;&gt;&lt;a href=&quot;#生成器对象&quot; class=&quot;headerlink&quot; title=&quot;生成器对象&quot;&gt;&lt;/a&gt;生成器对象&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x=(n &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; foo &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; bar(n))  &lt;span class=&quot;comment&quot;&gt;#foo是可迭代对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;type(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;type &lt;span class=&quot;string&quot;&gt;&#39;generator&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以把生成器对象赋值给x，意味着可以对x进行迭代操作：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; x:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它的好处就是不需要存储中间结果，也许你会使用（列表推导式）：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = [n &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; foo &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; bar(n)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;type(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;type &lt;span class=&quot;string&quot;&gt;&#39;list&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它比生成器对象能带来更快的速度。相对地，生成器更能节省内存开销，它的值是按需生成，不需要像列表推倒式一样把整个结果保存在内存中，同时它不能重新迭代，列表推导式则不然。&lt;/p&gt;
&lt;p&gt;##字典推导式&lt;/p&gt;
&lt;p&gt;在Python2.6以下版本字典生成器可以接受迭代的键值对:&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;d = dict((key, value) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (key, value) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; iterable)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从Python2.7或者Python3以后,你可以直接用字典推导式语法:&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;d = &amp;#123;key: value &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (key, value) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; iterable&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也可以用任何方式的迭代器(元组,列表,生成器..)，只要可迭代对象的元素中有两个值，&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;d = &amp;#123;value: foo(value) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sequence &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; bar(value)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更为高级的用法：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;key_value_gen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(k)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; chr(k+&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; chr((k+&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;)%&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d = dict(map(key_value_gen, range(&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##&lt;code&gt;iter()&lt;/code&gt;可接收callable参数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iter()&lt;/code&gt;内建函数接收的参数分为两种，第一种是：&lt;br&gt;&lt;code&gt;iter(collection)---&amp;gt; iterator&lt;/code&gt;&lt;br&gt;参数collection必须是可迭代对象或者是序列 ，第二种是：&lt;br&gt;&lt;code&gt;iter（callable， sentinel) --&amp;gt; iterator&lt;/code&gt;&lt;br&gt;callable函数会一直被调用，直到它的返回结果等于sentinel，例如：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;seek_next_line&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#每次读一个字符，直到出现换行符就返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; iter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt;: f.read(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;小心可变的默认参数&quot;&gt;&lt;a href=&quot;#小心可变的默认参数&quot; class=&quot;headerlink&quot; title=&quot;小心可变的默认参数&quot;&gt;&lt;/a&gt;小心可变的默认参数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x=[])&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    x.append(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;取而代之的是你应该使用一个标记值表示“没有指定”来替换可变对象，如：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        x = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    x.append(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##发送值到生成器函数在中&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mygen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Yield 5 until something else is passed back via send()&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f = (&lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; a) &lt;span class=&quot;comment&quot;&gt;#yield a and possibly get f in return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; f &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a = f  &lt;span class=&quot;comment&quot;&gt;#store the new value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g = mygen()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g.send(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;#we send this back to the generator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g.next() &lt;span class=&quot;comment&quot;&gt;#now it will yield 7 until we send something else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;如果你不喜欢使用空格缩进，那么可以使用C语言花括号-定义函数：&quot;&gt;&lt;a href=&quot;#如果你不喜欢使用空格缩进，那么可以使用C语言花括号-定义函数：&quot; class=&quot;headerlink&quot; title=&quot;如果你不喜欢使用空格缩进，那么可以使用C语言花括号{}定义函数：&quot;&gt;&lt;/a&gt;如果你不喜欢使用空格缩进，那么可以使用C语言花括号{}定义函数：&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; braces   &lt;span class=&quot;comment&quot;&gt;#这里的braces 指的是：curly braces（花括号）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SyntaxError: &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; a chance&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然这仅仅是一个玩笑，想用花括号定义函数？没门。感兴趣的还可以了解下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; barry_as_FLUFL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不过这是python3里面的特性，&lt;a href=&quot;http://www.python.org/dev/peps/pep-0401/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.python.org/dev/peps/pep-0401/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;切片操作中的步长参数&quot;&gt;&lt;a href=&quot;#切片操作中的步长参数&quot; class=&quot;headerlink&quot; title=&quot;切片操作中的步长参数&quot;&gt;&lt;/a&gt;切片操作中的步长参数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[::&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;# iterate over the whole list in 2-increments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一个特例：x[::-1]，反转列表：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[::&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有关反转，还有两个函数&lt;code&gt;reverse&lt;/code&gt;、&lt;code&gt;reversed&lt;/code&gt;，&lt;code&gt;reverse&lt;/code&gt;是list对象的方法，没有返回值，而&lt;code&gt;reversed&lt;/code&gt;是内建方法，可接收的参数包括tuple、string、list、unicode，以及用户自定义的类型，返回一个迭代器。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = range(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l.reverse()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l2 = reversed(l)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;listreverseiterator object at &lt;span class=&quot;number&quot;&gt;0x99faeec&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h2&gt;&lt;p&gt;装饰器使一个函数或方法包装在另一个函数里头，可以在被包装的函数添加一些额外的功能，比如日志，还可以对参数、返回结果进行修改。装饰器有点类似Java中的AOP。下面这个例子是打印被装饰的函数里面的参数的装饰器，&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_args&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(function)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Arguments:&#39;&lt;/span&gt;, args, kwargs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; function(*args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;@print_args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(text)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;write(&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arguments: (&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;,) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;@是语法糖，它等价于：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;write = print_args(write)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;write(&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arguments: (&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;,) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ... &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; foo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;i was never 0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;else代码块只有在for循环正常结束后执行如果遇到break语句那么不会执行else语句块，等价于下面：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;found = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; foo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        found = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; found: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;i was never 0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不过这种语法看起来怪怪地，让人感觉是else块是在for语句块没有执行的时候执行的，很容易让人去类比 if else 的语法，如果是把else换成finally或许更容易理解&lt;/p&gt;
&lt;h2 id=&quot;python2-5中的missing方法&quot;&gt;&lt;a href=&quot;#python2-5中的missing方法&quot; class=&quot;headerlink&quot; title=&quot;python2.5中的missing方法&quot;&gt;&lt;/a&gt;python2.5中的&lt;strong&gt;missing&lt;/strong&gt;方法&lt;/h2&gt;&lt;p&gt;dict的子类如果定义了方法&lt;code&gt;__missing__(self, key)&lt;/code&gt;，如果key不再dict中，那么d[key]就会调用&lt;code&gt;__missing__&lt;/code&gt;方法，而且d[key]的返回值就是&lt;code&gt;__missing__&lt;/code&gt;的返回值。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyDict&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dict)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__missing__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;  self[key] = rv = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m = MyDict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m[&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;].append(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m[&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;].append(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dict(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在collections模块下有一个叫defaultdict的dict子类，它与missing非常类似，但是对于不存在的项不需要传递参数。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; defaultdict&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m = defaultdict(list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m[&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;].append(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m[&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;].append(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dict(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;变量值交换&quot;&gt;&lt;a href=&quot;#变量值交换&quot; class=&quot;headerlink&quot; title=&quot;变量值交换&quot;&gt;&lt;/a&gt;变量值交换&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b = b, a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等号右边是一个创建元组的表达式，等号左边解压（没有引用的）元组分别赋给名称（变量）a和b。赋完值后因为没有被其他名字引用，因此被标记之后被垃圾收集器回收，而绑定到a和b的值已经被交换了。&lt;/p&gt;
&lt;p&gt;注意：多值赋值其实仅仅就是元组打包和序列解包的组合的过程&lt;/p&gt;
&lt;h2 id=&quot;可读的正则表达式&quot;&gt;&lt;a href=&quot;#可读的正则表达式&quot; class=&quot;headerlink&quot; title=&quot;可读的正则表达式&quot;&gt;&lt;/a&gt;可读的正则表达式&lt;/h2&gt;&lt;p&gt;在Python中你可以把正则表达式分割成多行写，还可以写注释&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pattern = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;^                   # beginning of string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;M&amp;#123;0,4&amp;#125;              # thousands - 0 to 4 M&#39;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;(CM|CD|D?C&amp;#123;0,3&amp;#125;)    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C&#39;s),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;                    #            or 500-800 (D, followed by 0 to 3 C&#39;s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;(XC|XL|L?X&amp;#123;0,3&amp;#125;)    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X&#39;s),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;                    #        or 50-80 (L, followed by 0 to 3 X&#39;s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;(IX|IV|V?I&amp;#123;0,3&amp;#125;)    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I&#39;s),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;                    #        or 5-8 (V, followed by 0 to 3 I&#39;s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;$                   # end of string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re.search(pattern, &lt;span class=&quot;string&quot;&gt;&#39;M&#39;&lt;/span&gt;, re.VERBOSE)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;函数参数解包-unpacking&quot;&gt;&lt;a href=&quot;#函数参数解包-unpacking&quot; class=&quot;headerlink&quot; title=&quot;函数参数解包(unpacking)&quot;&gt;&lt;/a&gt;函数参数解包(unpacking)&lt;/h2&gt;&lt;p&gt;分别使用和*解包列表和字典,这是一种非常实用的快捷方式,因为list,tuple,dict作为容器被广泛使用&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw_point&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# do some magic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;point_foo = (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;point_bar = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;draw_point(*point_foo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;draw_point(**point_bar)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;动态地创建新类型&lt;/p&gt;
&lt;p&gt;动态创建新类型虽不是实用功能,但了解一下也是有好处的&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;NewType = type(&lt;span class=&quot;string&quot;&gt;&quot;NewType&quot;&lt;/span&gt;, (object,), &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;n = NewType()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;n.x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;type的第一个参数就是类名,第二个参数是继承的父类,第三个参数是类的属性.它完全等同于:&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    x = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;n = NewType()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;n.x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;上下文管理器与with语句&quot;&gt;&lt;a href=&quot;#上下文管理器与with语句&quot; class=&quot;headerlink&quot; title=&quot;上下文管理器与with语句&quot;&gt;&lt;/a&gt;上下文管理器与with语句&lt;/h2&gt;&lt;p&gt;上下文管理器(context manager)用于规定某个对象的使用范围,进入或退出该范围时,特殊的操作会被执行(比如关闭连接,释放内存等等),语法是:&lt;code&gt;with... as ...&lt;/code&gt;,该特性在python2.5引入的. 上下文管理器协议有两个方法组成&lt;code&gt;contextmanager.__enter__()&lt;/code&gt;和&lt;code&gt;contextmanager.__exit__()&lt;/code&gt;,任何实现了这两个方法的对象都称之为上下文管理器对象,比如文件对象就默认实现了该协议.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;foo.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.write(&lt;span class=&quot;string&quot;&gt;&#39;hello!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;字典的get-方法&quot;&gt;&lt;a href=&quot;#字典的get-方法&quot; class=&quot;headerlink&quot; title=&quot;字典的get()方法&quot;&gt;&lt;/a&gt;字典的get()方法&lt;/h2&gt;&lt;p&gt;字典的&lt;code&gt;get()&lt;/code&gt;方法用来替换d[‘key’],后者如果是遇到key不存在会有异常,如果使用的&lt;code&gt;d.get(&amp;#39;key&amp;#39;)&lt;/code&gt;,key不存在时它返回的是None,你可以指定两个参数如:&lt;code&gt;d.get(&amp;#39;key&amp;#39;,0)&lt;/code&gt;来用0取代返回的None&lt;br&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sum[value] = sum.get(value, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有一个类似的方法&lt;code&gt;setdefault(key, value)&lt;/code&gt;,如果字典中存在key,那么就直接返回d[key],否则设置&lt;code&gt;d[key]=value&lt;/code&gt;,并返回该值.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d.setdefault(&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d[&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d.setdefault(&lt;span class=&quot;string&quot;&gt;&#39;key2&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d[&lt;span class=&quot;string&quot;&gt;&#39;key2&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;collections.Counter是dict的子类,用来统计可哈稀对象,&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cnt = Counter(&lt;span class=&quot;string&quot;&gt;&#39;helloworld&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cnt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counter(&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cnt[&lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cnt[&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cnt.get(&lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述符-Descriptors&quot;&gt;&lt;a href=&quot;#描述符-Descriptors&quot; class=&quot;headerlink&quot; title=&quot;描述符(Descriptors)&quot;&gt;&lt;/a&gt;描述符(Descriptors)&lt;/h2&gt;&lt;p&gt;描述符是python的核心特新之一,当你使用.访问成员时,(如:x.y),python首先在实例字典中查找该成员,如果没有发现再从类字典中查找,如果这个对象实现了描述符(实现了&lt;code&gt;__get__&lt;/code&gt;,&lt;code&gt;__set__&lt;/code&gt;,&lt;code&gt;__delete__&lt;/code&gt;),那么优先返回&lt;code&gt;__get__&lt;/code&gt;方法的返回值.&lt;/p&gt;
&lt;p&gt;##条件赋值&lt;/p&gt;
&lt;p&gt;为什么python中没有类c语言的三目运算符,Guido van Rossum说过了,条件赋值更容易理解&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (y == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个表达式的意思就是:如果y等于那么就把3赋值给x,否则把2赋值给x, 条件中的括号是可选的,为了可读性可以考虑加上去.if else中的表达式可以是任何类型的,既可以函数,还可以类&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(func1 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; y == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; func2)(arg1, arg2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果y等于1,那么调用func1(arg1,arg2)否则调用func2(arg1,arg2)&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = (class1 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; y == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; class2)(arg1, arg2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;class1,class2是两个类&lt;/p&gt;
&lt;h2 id=&quot;异常else语句块&quot;&gt;&lt;a href=&quot;#异常else语句块&quot; class=&quot;headerlink&quot; title=&quot;异常else语句块&quot;&gt;&lt;/a&gt;异常else语句块&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   try_this(whatever)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; SomeException, exception:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;#Handle exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;else语句块会在没有异常的情况下执行,先于finally,它的好处就是你可以明确知道它会在没有异常的情况下执行,如果是把else语句块放在try语句块里面就达不到这种效果.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://foofish.net/blog/25/python-tricks-tips&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://foofish.net/blog/25/python-tricks-tips&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;链式比较操作&quot;&gt;&lt;a href=&quot;#链式比较操作&quot; class=&quot;headerlink&quot; title=&quot;链式比较操作&quot;&gt;&lt;/a&gt;链式比较操作&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;lt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;lt; x*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;gt; x &amp;lt;= &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; == x &amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能认为它执行的过程先是：&lt;code&gt;1 &amp;lt; x&lt;/code&gt;，返回True，然后再比较&lt;code&gt;True &amp;lt; 10&lt;/code&gt;,当然这么做也是返回True,比较表达式&lt;code&gt;True &amp;lt; 10&lt;/code&gt;,因为解释器会把True转换成1，False转换成0。但这里的链式比较解释器在内部并不是这样干的，它会把这种链式的比较操作转换成：&lt;code&gt;1 &amp;lt; x and x &amp;lt; 10&lt;/code&gt;，不信你可以看看最后一个例子。这样的链式操作本可以值得所有编程语言拥有，但是很遗憾，其他语言很少有这样的支持。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.vitostack.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.vitostack.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫－常用技巧</title>
    <link href="http://www.vitostack.com/2016/05/10/python-crawer-skill/"/>
    <id>http://www.vitostack.com/2016/05/10/python-crawer-skill/</id>
    <published>2016-05-10T15:55:02.000Z</published>
    <updated>2016-05-10T15:59:17.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;基本抓取网页&quot;&gt;&lt;a href=&quot;#基本抓取网页&quot; class=&quot;headerlink&quot; title=&quot;基本抓取网页&quot;&gt;&lt;/a&gt;基本抓取网页&lt;/h2&gt;&lt;h3 id=&quot;get方法&quot;&gt;&lt;a href=&quot;#get方法&quot; class=&quot;headerlink&quot; title=&quot;get方法&quot;&gt;&lt;/a&gt;get方法&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response = urllib2.urlopen(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; response.read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;post方法&quot;&gt;&lt;a href=&quot;#post方法&quot; class=&quot;headerlink&quot; title=&quot;post方法&quot;&gt;&lt;/a&gt;post方法&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&quot;http://abcde.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;form = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;1234&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;form_data = urllib.urlencode(form)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request = urllib2.Request(url,form_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response = urllib2.urlopen(request)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; response.read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用代理IP&quot;&gt;&lt;a href=&quot;#使用代理IP&quot; class=&quot;headerlink&quot; title=&quot;使用代理IP&quot;&gt;&lt;/a&gt;使用代理IP&lt;/h2&gt;&lt;p&gt;在开发爬虫过程中经常会遇到IP被封掉的情况，这时就需要用到代理IP；&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在urllib2包中有&lt;code&gt;ProxyHandler&lt;/code&gt;类，通过此类可以设置代理访问网页，如下代码片段：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy = urllib2.ProxyHandler(&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1:8087&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opener = urllib2.build_opener(proxy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;urllib2.install_opener(opener)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response = urllib2.urlopen(&lt;span class=&quot;string&quot;&gt;&#39;http://www.baidu.com&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; response.read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Cookies处理&quot;&gt;&lt;a href=&quot;#Cookies处理&quot; class=&quot;headerlink&quot; title=&quot;Cookies处理&quot;&gt;&lt;/a&gt;Cookies处理&lt;/h2&gt;&lt;p&gt; &lt;em&gt;cookies&lt;/em&gt;是某些网站为了辨别用户身份、进行&lt;em&gt;session&lt;/em&gt;跟踪而储存在用户本地终端上的数据(通常经过加密)，python提供了&lt;code&gt;cookielib&lt;/code&gt;模块用于处理&lt;em&gt;cookies&lt;/em&gt;，&lt;code&gt;cookielib&lt;/code&gt;模块的主要作用是提供可存储&lt;em&gt;cookie&lt;/em&gt;的对象，以便于与&lt;code&gt;urllib2&lt;/code&gt;模块配合使用来访问Internet资源.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2,cookielib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cookie_support = urllib2.HTTPCookieProcessor(cookielib.CookieJar())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opener = urllib2.build_opener(cookie_support)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;urllib2.install_opener(opener)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;content = urllib2.urlopen(&lt;span class=&quot;string&quot;&gt;&#39;http://www.vitostack.com/2016/05/01/first-blog/&#39;&lt;/span&gt;).read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关键在于&lt;code&gt;CookieJar()&lt;/code&gt;，它用于管理&lt;em&gt;HTTP&lt;/em&gt; &lt;em&gt;cookie&lt;/em&gt;值、存储&lt;em&gt;HTTP&lt;/em&gt;请求生成的&lt;em&gt;cookie&lt;/em&gt;、向传出的&lt;em&gt;HTTP&lt;/em&gt;请求添加&lt;em&gt;cookie&lt;/em&gt;的对象。整个&lt;em&gt;cookie&lt;/em&gt;都存储在内存中，对&lt;code&gt;CookieJar&lt;/code&gt;实例进行垃圾回收后&lt;em&gt;cookie&lt;/em&gt;也将丢失，所有过程都不需要单独去操作。&lt;/p&gt;
&lt;h3 id=&quot;手动添加cookie&quot;&gt;&lt;a href=&quot;#手动添加cookie&quot; class=&quot;headerlink&quot; title=&quot;手动添加cookie&quot;&gt;&lt;/a&gt;手动添加cookie&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cookie=&lt;span class=&quot;string&quot;&gt;&quot;PHPSESSID=91rurfqm2329bopnosfu4fvmu7;kmsign=55d2c12c9b1e3;KMUID=b6Ejc1XSwPq9o756AxnBAg=&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request.add_header(&lt;span class=&quot;string&quot;&gt;&quot;Cookie&quot;&lt;/span&gt;,cookie)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;伪装成浏览器&quot;&gt;&lt;a href=&quot;#伪装成浏览器&quot; class=&quot;headerlink&quot; title=&quot;伪装成浏览器&quot;&gt;&lt;/a&gt;伪装成浏览器&lt;/h2&gt;&lt;p&gt;某些网站反感爬虫的到访，于是对爬虫一律拒绝请求。所以用&lt;code&gt;urllib2&lt;/code&gt;直接访问网站经常会出现&lt;em&gt;HTTP Error 403: Forbidden&lt;/em&gt;的情况.&lt;br&gt;对有些&lt;em&gt;header&lt;/em&gt;要特别留意，&lt;em&gt;Server&lt;/em&gt;端会针对这些&lt;em&gt;header&lt;/em&gt;做检查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;User-Agent&lt;/code&gt; 有些 Server 或 Proxy 会检查该值，用来判断是否是浏览器发起的 Request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Content-Type&lt;/code&gt; 在使用 &lt;strong&gt;REST&lt;/strong&gt; 接口时，Server 会检查该值，用来确定 HTTP Body 中的内容该怎样解析。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时可以通过修改http包中的header来实现，代码片段如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;User-Agent&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;Mozilla/5.0(Windows;U;WindowsNT6.1;en-US;rv:1.9.1.6)Gecko/20091201Firefox/3.5.6&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request = urllib2.Request(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&#39;http://www.vitostack.com/2016/05/01/first-blog/&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headers=headers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printurllib2.urlopen(request).read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;页面解析&quot;&gt;&lt;a href=&quot;#页面解析&quot; class=&quot;headerlink&quot; title=&quot;页面解析&quot;&gt;&lt;/a&gt;页面解析&lt;/h2&gt;&lt;p&gt;对于页面解析最强大的当然是正则表达式，这个对于不同网站不同的使用者都不一样，就不用过多的说明，附两个比较好的网址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正则表达式入门：&lt;a href=&quot;http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正则表达式在线测试：&lt;a href=&quot;http://tool.oschina.net/regex/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tool.oschina.net/regex/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其次就是解析库了，常用的有两个&lt;strong&gt;lxml&lt;/strong&gt;和&lt;strong&gt;BeautifulSoup&lt;/strong&gt;，对于这两个的使用介绍两个比较好的网站：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;lxml：&lt;a href=&quot;http://www.vitostack.com/2016/05/10/xpath-syntax/&quot;&gt;http://www.vitostack.com/2016/05/10/xpath-syntax/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BeautifulSoup：&lt;a href=&quot;http://www.kuqin.com/shuoit/20150424/345875.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Python爬虫入门八之Beautiful Soup的用法》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于这两个库，我的评价是，都是HTML/XML的处理库，&lt;code&gt;Beautifulsoup&lt;/code&gt;纯python实现，效率低，但是功能实用，比如能用通过结果搜索获得某个HTML节点的源码；lxmlC语言编码，高效，支持&lt;code&gt;Xpath&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;验证码的处理&quot;&gt;&lt;a href=&quot;#验证码的处理&quot; class=&quot;headerlink&quot; title=&quot;验证码的处理&quot;&gt;&lt;/a&gt;验证码的处理&lt;/h2&gt;&lt;p&gt;对于一些简单的验证码，可以进行简单的识别。本人也只进行过一些简单的验证码识别。但是有些反人类的验证码，比如12306，可以通过打码平台进行人工打码，当然这是要付费的。&lt;/p&gt;
&lt;h2 id=&quot;gzip压缩&quot;&gt;&lt;a href=&quot;#gzip压缩&quot; class=&quot;headerlink&quot; title=&quot;gzip压缩&quot;&gt;&lt;/a&gt;gzip压缩&lt;/h2&gt;&lt;p&gt;有没有遇到过某些网页，不论怎么转码都是一团乱码。哈哈，那说明你还不知道许多web服务具有发送压缩数据的能力，这可以将网络线路上传输的大量数据消减 60% 以上。这尤其适用于 XML web 服务，因为 XML 数据 的压缩率可以很高。&lt;/p&gt;
&lt;p&gt;但是一般服务器不会为你发送压缩数据，除非你告诉服务器你可以处理压缩数据。&lt;/p&gt;
&lt;p&gt;于是需要这样修改代码：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2,httplib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request = urllib2.Request(&lt;span class=&quot;string&quot;&gt;&#39;http://xxxx.com&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request.add_header(&lt;span class=&quot;string&quot;&gt;&#39;Accept-encoding&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;gzip&#39;&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opener = urllib2.build_opener()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = opener.open(request)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是关键:创建&lt;code&gt;Request&lt;/code&gt;对象，添加一个 &lt;code&gt;Accept-encoding&lt;/code&gt; 头信息告诉服务器你能接受 &lt;code&gt;gzip&lt;/code&gt; 压缩数据.&lt;br&gt;然后就是解压缩数据：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; StringIO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; gzip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compresseddata = f.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compressedstream = StringIO.StringIO(compresseddata)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gzipper = gzip.GzipFile(fileobj=compressedstream)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printgzipper.read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;多线程并发抓取&quot;&gt;&lt;a href=&quot;#多线程并发抓取&quot; class=&quot;headerlink&quot; title=&quot;多线程并发抓取&quot;&gt;&lt;/a&gt;多线程并发抓取&lt;/h2&gt;&lt;p&gt;单线程太慢的话，就需要多线程了，这里给个简单的线程池模板 这个程序只是简单地打印了1-10，但是可以看出是并发的。&lt;br&gt;虽然说python的多线程很鸡肋，但是对于爬虫这种网络频繁型，还是能一定程度提高效率的。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; Queue &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#q是任务队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#NUM是并发线程总数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#JOBS是有多少任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;q = Queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NUM = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOBS = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#具体的处理函数，负责处理单个任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do_somthing_using&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arguments)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; arguments&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这个是工作进程，负责不断从队列取数据并处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;working&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arguments = q.get()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        do_somthing_using(arguments)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        q.task_done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#forkNUM个线程等待队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(NUM):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t=Thread(target=working)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.setDaemon(&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#把JOBS排入队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(JOBS):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    q.put(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#等待所有JOBS完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;q.join()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本抓取网页&quot;&gt;&lt;a href=&quot;#基本抓取网页&quot; class=&quot;headerlink&quot; title=&quot;基本抓取网页&quot;&gt;&lt;/a&gt;基本抓取网页&lt;/h2&gt;&lt;h3 id=&quot;get方法&quot;&gt;&lt;a href=&quot;#get方法&quot; class=&quot;headerlink&quot; title=&quot;get方法&quot;&gt;&lt;/a&gt;get方法&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response = urllib2.urlopen(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; response.read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;post方法&quot;&gt;&lt;a href=&quot;#post方法&quot; class=&quot;headerlink&quot; title=&quot;post方法&quot;&gt;&lt;/a&gt;post方法&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&quot;http://abcde.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;form = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;1234&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;form_data = urllib.urlencode(form)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request = urllib2.Request(url,form_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response = urllib2.urlopen(request)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; response.read()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用代理IP&quot;&gt;&lt;a href=&quot;#使用代理IP&quot; class=&quot;headerlink&quot; title=&quot;使用代理IP&quot;&gt;&lt;/a&gt;使用代理IP&lt;/h2&gt;&lt;p&gt;在开发爬虫过程中经常会遇到IP被封掉的情况，这时就需要用到代理IP；&lt;br&gt;
    
    </summary>
    
      <category term="爬虫技术栈" scheme="http://www.vitostack.com/categories/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="python爬虫" scheme="http://www.vitostack.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
      <category term="urllib" scheme="http://www.vitostack.com/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫-Xpath语法</title>
    <link href="http://www.vitostack.com/2016/05/10/xpath-syntax/"/>
    <id>http://www.vitostack.com/2016/05/10/xpath-syntax/</id>
    <published>2016-05-10T15:41:25.000Z</published>
    <updated>2016-05-10T15:59:17.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;选取节点&quot;&gt;&lt;a href=&quot;#选取节点&quot; class=&quot;headerlink&quot; title=&quot;选取节点&quot;&gt;&lt;/a&gt;选取节点&lt;/h2&gt;&lt;h3 id=&quot;常用的路劲表达式：&quot;&gt;&lt;a href=&quot;#常用的路劲表达式：&quot; class=&quot;headerlink&quot; title=&quot;常用的路劲表达式：&quot;&gt;&lt;/a&gt;常用的路劲表达式：&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nodename&lt;/td&gt;
&lt;td&gt;选取nodename节点的所有子节点&lt;/td&gt;
&lt;td&gt;xpath(‘//div’)&lt;/td&gt;
&lt;td&gt;选取了div节点的所有子节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;从根节点选取&lt;/td&gt;
&lt;td&gt;xpath(‘/div’)&lt;/td&gt;
&lt;td&gt;从根节点上选取div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;选取所有的当前节点，不考虑他们的位置&lt;/td&gt;
&lt;td&gt;xpath(‘//div’)&lt;/td&gt;
&lt;td&gt;选取所有的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;选取当前节点&lt;/td&gt;
&lt;td&gt;xpath(‘./div’)&lt;/td&gt;
&lt;td&gt;选取当前节点下的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;..&lt;/td&gt;
&lt;td&gt;选取当前节点的父节点&lt;/td&gt;
&lt;td&gt;xpath(‘..’)&lt;/td&gt;
&lt;td&gt;回到上一个节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;选取属性&lt;/td&gt;
&lt;td&gt;xpath（’//@calss’）&lt;/td&gt;
&lt;td&gt;选取所有的class属性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;谓语&quot;&gt;&lt;a href=&quot;#谓语&quot; class=&quot;headerlink&quot; title=&quot;谓语&quot;&gt;&lt;/a&gt;谓语&lt;/h2&gt;&lt;p&gt;谓语被嵌在方括号内，用来查找某个特定的节点或包含某个制定的值的节点&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;实例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘/body/div[1]’)&lt;/td&gt;
&lt;td&gt;选取body下的第一个div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘/body/div[last()]’)&lt;/td&gt;
&lt;td&gt;选取body下最后一个div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘/body/div[last()-1]’)&lt;/td&gt;
&lt;td&gt;选取body下倒数第二个div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘/body/div[positon()&amp;lt;3]’)&lt;/td&gt;
&lt;td&gt;选取body下前两个div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘/body/div[@class]’)&lt;/td&gt;
&lt;td&gt;选取body下带有class属性的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘/body/div[@class=”main”]’)&lt;/td&gt;
&lt;td&gt;选取body下class属性为main的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘/body/div[price&amp;gt;35.00]’)&lt;/td&gt;
&lt;td&gt;选取body下price元素值大于35的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;通配符&quot;&gt;&lt;a href=&quot;#通配符&quot; class=&quot;headerlink&quot; title=&quot;通配符&quot;&gt;&lt;/a&gt;通配符&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Xpath&lt;/code&gt;通过通配符来选取未知的XML元素&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;xpath（’/div/*’）&lt;/td&gt;
&lt;td&gt;选取div下的所有子节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘/div[@*]’)&lt;/td&gt;
&lt;td&gt;选取所有带属性的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;取多个路径&quot;&gt;&lt;a href=&quot;#取多个路径&quot; class=&quot;headerlink&quot; title=&quot;取多个路径&quot;&gt;&lt;/a&gt;取多个路径&lt;/h2&gt;&lt;p&gt;使用“|”运算符可以选取多个路径&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;xpath(‘//div&lt;/td&gt;
&lt;td&gt;//table’)&lt;/td&gt;
&lt;td&gt;选取所有的div和table节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Xpath轴&quot;&gt;&lt;a href=&quot;#Xpath轴&quot; class=&quot;headerlink&quot; title=&quot;Xpath轴&quot;&gt;&lt;/a&gt;Xpath轴&lt;/h2&gt;&lt;p&gt;轴可以定义相对于当前节点的节点集&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;轴名称&lt;/th&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ancestor&lt;/td&gt;
&lt;td&gt;xpath(‘./ancestor::*’)&lt;/td&gt;
&lt;td&gt;选取当前节点的所有先辈节点（父、祖父）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ancestor-or-self&lt;/td&gt;
&lt;td&gt;xpath(‘./ancestor-or-self::*’)&lt;/td&gt;
&lt;td&gt;选取当前节点的所有先辈节点以及节点本身&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attribute&lt;/td&gt;
&lt;td&gt;xpath(‘./attribute::*’)&lt;/td&gt;
&lt;td&gt;选取当前节点的所有属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;child&lt;/td&gt;
&lt;td&gt;xpath(‘./child::*’)&lt;/td&gt;
&lt;td&gt;返回当前节点的所有子节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;descendant&lt;/td&gt;
&lt;td&gt;xpath(‘./descendant::*’)&lt;/td&gt;
&lt;td&gt;返回当前节点的所有后代节点（子节点、孙节点）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;following&lt;/td&gt;
&lt;td&gt;xpath(‘./following::*’)&lt;/td&gt;
&lt;td&gt;选取文档中当前节点结束标签后的所有节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;following-sibing&lt;/td&gt;
&lt;td&gt;xpath(‘./following-sibing::*’)&lt;/td&gt;
&lt;td&gt;选取当前节点之后的兄弟节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parent&lt;/td&gt;
&lt;td&gt;xpath(‘./parent::*’)&lt;/td&gt;
&lt;td&gt;选取当前节点的父节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preceding&lt;/td&gt;
&lt;td&gt;xpath(‘./preceding::*’)&lt;/td&gt;
&lt;td&gt;选取文档中当前节点开始标签前的所有节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preceding-sibling&lt;/td&gt;
&lt;td&gt;xpath(‘./preceding-sibling::*’)&lt;/td&gt;
&lt;td&gt;选取当前节点之前的兄弟节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;self&lt;/td&gt;
&lt;td&gt;xpath(‘./self::*’)&lt;/td&gt;
&lt;td&gt;选取当前节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;功能函数&quot;&gt;&lt;a href=&quot;#功能函数&quot; class=&quot;headerlink&quot; title=&quot;功能函数&quot;&gt;&lt;/a&gt;功能函数&lt;/h2&gt;&lt;p&gt;使用功能函数能够更好的进行模糊搜索&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;starts-with&lt;/td&gt;
&lt;td&gt;xpath(‘//div[starts-with(@id,”ma”)]’)&lt;/td&gt;
&lt;td&gt;选取id值以ma开头的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;contains&lt;/td&gt;
&lt;td&gt;xpath(‘//div[contains(@id,”ma”)]’)&lt;/td&gt;
&lt;td&gt;选取id值包含ma的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;xpath(‘//div[contains(@id,”ma”) and contains(@id,”in”)]’)&lt;/td&gt;
&lt;td&gt;选取id值包含ma和in的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text()&lt;/td&gt;
&lt;td&gt;xpath(‘//div[contains(text(),”ma”)]’)&lt;/td&gt;
&lt;td&gt;选取节点文本包含ma的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;scrapy xpath文档&lt;/strong&gt;：&lt;a href=&quot;http://doc.scrapy.org/en/0.14/topics/selectors.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://doc.scrapy.org/en/0.14/topics/selectors.html&lt;/a&gt; &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选取节点&quot;&gt;&lt;a href=&quot;#选取节点&quot; class=&quot;headerlink&quot; title=&quot;选取节点&quot;&gt;&lt;/a&gt;选取节点&lt;/h2&gt;&lt;h3 id=&quot;常用的路劲表达式：&quot;&gt;&lt;a href=&quot;#常用的路劲表达式：&quot; class=&quot;headerlink&quot; title=&quot;常用的路劲表达式：&quot;&gt;&lt;/a&gt;常用的路劲表达式：&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nodename&lt;/td&gt;
&lt;td&gt;选取nodename节点的所有子节点&lt;/td&gt;
&lt;td&gt;xpath(‘//div’)&lt;/td&gt;
&lt;td&gt;选取了div节点的所有子节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;从根节点选取&lt;/td&gt;
&lt;td&gt;xpath(‘/div’)&lt;/td&gt;
&lt;td&gt;从根节点上选取div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;选取所有的当前节点，不考虑他们的位置&lt;/td&gt;
&lt;td&gt;xpath(‘//div’)&lt;/td&gt;
&lt;td&gt;选取所有的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;选取当前节点&lt;/td&gt;
&lt;td&gt;xpath(‘./div’)&lt;/td&gt;
&lt;td&gt;选取当前节点下的div节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;..&lt;/td&gt;
&lt;td&gt;选取当前节点的父节点&lt;/td&gt;
&lt;td&gt;xpath(‘..’)&lt;/td&gt;
&lt;td&gt;回到上一个节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;选取属性&lt;/td&gt;
&lt;td&gt;xpath（’//@calss’）&lt;/td&gt;
&lt;td&gt;选取所有的class属性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;谓语&quot;&gt;&lt;a href=&quot;#谓语&quot; class=&quot;headerlink&quot; title=&quot;谓语&quot;&gt;&lt;/a&gt;谓语&lt;/h2&gt;&lt;p&gt;谓语被嵌在方括号内，用来查找某个特定的节点或包含某个制定的值的节点&lt;br&gt;
    
    </summary>
    
      <category term="爬虫技术栈" scheme="http://www.vitostack.com/categories/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="python爬虫" scheme="http://www.vitostack.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
      <category term="Xpath" scheme="http://www.vitostack.com/tags/Xpath/"/>
    
  </entry>
  
  <entry>
    <title>hadoop failed task和killed task介绍</title>
    <link href="http://www.vitostack.com/2016/05/06/hadoop-failed-task-and-killed-task/"/>
    <id>http://www.vitostack.com/2016/05/06/hadoop-failed-task-and-killed-task/</id>
    <published>2016-05-06T11:37:09.000Z</published>
    <updated>2016-05-06T15:06:47.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;   failed task可理解为自杀，也就是task本身出了问题而自杀；killed task可理解为是他杀，也就是jobtracker认为这个任务的执行是多余的，所以把任务直接杀掉。起初用hadoop的时候经常在一个complete的job中看到几个failed 或者是 killed task，还经常好奇为什么有的时候task的失败不会影响到整个job的失败，而有的时候就会使整个job的失败，到底failed和killed task对整个job的影响是什么？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;failed-task&quot;&gt;&lt;a href=&quot;#failed-task&quot; class=&quot;headerlink&quot; title=&quot;failed task&quot;&gt;&lt;/a&gt;failed task&lt;/h2&gt;&lt;p&gt;failed task出现的原因可分为以下几种情况：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;child task失败，比如map/reduce任务中抛出了异常，child JVM会将这个error汇报给tasktracker，tasktracker再回将这个error汇报给jobtracker&lt;/li&gt;
&lt;li&gt;child JVM失败，比如启动child task的JVM本身出现了bug，导致进程直接死掉，此时tasktracker会知道child JVM已经退出，并汇报给jobtracker此次task attempt失败&lt;/li&gt;
&lt;li&gt;任务超时，如果某个任务很长时间都没有更新状态，则认为任务超时。有的任务虽然执行时间非常长，但它不停的在更新自己的状态，所以系统也不会认为这是个超时任务&lt;/li&gt;
&lt;li&gt;tasktracker由于软件或硬件的原因直接挂掉了。对于这种情况，tasktracker会停止向jobtracker发送心跳，jobtracker会认为这是个dead node并把该节点加入黑名单，从此不再给这个节点分配任务，直到问题被修复后tasktracker重新汇报心跳。我遇到最囧的情况就是当各节点hosts不一致的时候，会出现tasktracker向jobtasker发送心跳，但jobtracker不能正确向tasktracker，形成了半死不活的节点～。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hadoop本身的一个设计理念就是在普通的pc硬件上构建高可靠性的系统，任何failed task都不会引起整个job的失败，因为所有失败的任务都会被重新执行（reschedule execution），只有当重新执行的次数超过4次，才会把这任务标记为失败，导致整个job的失败。&lt;/p&gt;
&lt;h2 id=&quot;killed-task&quot;&gt;&lt;a href=&quot;#killed-task&quot; class=&quot;headerlink&quot; title=&quot;killed task&quot;&gt;&lt;/a&gt;killed task&lt;/h2&gt;&lt;p&gt;在介绍killed task之前，先介绍一下speculative execution。举个简单的例子，如果某个job有2000个map task，已经完成了1999个，只剩下一个task由于硬件比较慢而成为拖尾任务，为了减少拖尾任务对整个job运行时间的影响，jobtracker会重新启动一个一模一样的duplicate task和原有的task并行的执行，这样有一个task执行成功，整个map过程就会结束。speculative execution只有个处理拖尾任务的优化策略，并不能提高系统的可靠性。&lt;br&gt;介绍完speculative execution后我们来看看killed task的情况。killed task可能在两种情况下发生，一个是speculative execution中两个并行duplicate task中如果有一个执行成功，另一个将被kill掉；第二种情况是如果某个tasktracker挂了，那么正在该节点上面跑的任务都将被标记为killed&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;   failed task可理解为自杀，也就是task本身出了问题而自杀；killed task可理解为是他杀，也就是jobtracker认为这个任务的执行是多余的，所以把任务直接杀掉。起初用hadoop的时候经常在一个complete的job中看到几个failed 或者是 killed task，还经常好奇为什么有的时候task的失败不会影响到整个job的失败，而有的时候就会使整个job的失败，到底failed和killed task对整个job的影响是什么？&lt;br&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://www.vitostack.com/categories/Hadoop/"/>
    
    
      <category term="hadoop" scheme="http://www.vitostack.com/tags/hadoop/"/>
    
      <category term="hadoop性能优化" scheme="http://www.vitostack.com/tags/hadoop%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>python排序sort sorted高级排序技巧</title>
    <link href="http://www.vitostack.com/2016/05/06/python-sort-highly-advance/"/>
    <id>http://www.vitostack.com/2016/05/06/python-sort-highly-advance/</id>
    <published>2016-05-06T04:04:27.000Z</published>
    <updated>2016-05-06T15:06:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;基础货&quot;&gt;&lt;a href=&quot;#基础货&quot; class=&quot;headerlink&quot; title=&quot;基础货&quot;&gt;&lt;/a&gt;基础货&lt;/h2&gt;&lt;p&gt;Python &lt;code&gt;list&lt;/code&gt;内置&lt;code&gt;sort()&lt;/code&gt;方法用来排序，也可以用python内置的全局&lt;code&gt;sorted()&lt;/code&gt;方法来对可迭代的序列排序生成新的序列。&lt;/p&gt;
&lt;h3 id=&quot;排序基础&quot;&gt;&lt;a href=&quot;#排序基础&quot; class=&quot;headerlink&quot; title=&quot;排序基础&quot;&gt;&lt;/a&gt;排序基础&lt;/h3&gt;&lt;p&gt;简单的升序排序是非常容易的。只需要调用&lt;code&gt;sorted()&lt;/code&gt;方法。它返回一个新的&lt;code&gt;list&lt;/code&gt;，新的&lt;code&gt;list&lt;/code&gt;的元素基于小于运算符&lt;code&gt;__lt__&lt;/code&gt;来排序。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted([&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也可以使用&lt;code&gt;list.sort()&lt;/code&gt;方法来排序，此时&lt;code&gt;list&lt;/code&gt;本身将被修改。通常此方法不如&lt;code&gt;sorted()&lt;/code&gt;方便，但是如果你不需要保留原来的&lt;code&gt;list&lt;/code&gt;，此方法将更有效。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一个不同就是&lt;code&gt;list.sort()&lt;/code&gt;方法仅被定义在&lt;code&gt;list&lt;/code&gt;中，相反地&lt;code&gt;sorted()&lt;/code&gt;方法对所有的可迭代序列都有效。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sorted(&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;key参数-函数&quot;&gt;&lt;a href=&quot;#key参数-函数&quot; class=&quot;headerlink&quot; title=&quot;key参数/函数&quot;&gt;&lt;/a&gt;key参数/函数&lt;/h3&gt;&lt;p&gt;从python2.4开始，&lt;code&gt;list.sort()&lt;/code&gt;和&lt;code&gt;sorted()&lt;/code&gt;函数增加了&lt;code&gt;key&lt;/code&gt;参数来指定一个函数，此函数将在每个元素比较前被调用。 例如通过&lt;code&gt;key&lt;/code&gt;指定的函数来忽略字符串的大小写：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(&lt;span class=&quot;string&quot;&gt;&quot;This is a test string from Andrew&quot;&lt;/span&gt;.split(), key=str.lower)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Andrew&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;from&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;is&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;This&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;key&lt;/code&gt;参数的值为一个函数，此函数只有一个参数且返回一个值用来进行比较。这个技术是快速的因为key指定的函数将准确地对每个元素调用。&lt;br&gt;更广泛的使用情况是用复杂对象的某些值来对复杂对象的序列排序，例如：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;student_tuples = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_tuples, key=&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; student: student[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])   &lt;span class=&quot;comment&quot;&gt;# sort by age&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样的技术对拥有命名属性的复杂对象也适用，例如：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, grade, age)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.grade = grade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.age = age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; repr((self.name, self.grade, self.age))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;student_objects = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Student(&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Student(&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Student(&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_objects, key=&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; student: student.age)   &lt;span class=&quot;comment&quot;&gt;# sort by age&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;高级技巧&quot;&gt;&lt;a href=&quot;#高级技巧&quot; class=&quot;headerlink&quot; title=&quot;高级技巧&quot;&gt;&lt;/a&gt;高级技巧&lt;/h2&gt;&lt;h3 id=&quot;Operator-模块函数&quot;&gt;&lt;a href=&quot;#Operator-模块函数&quot; class=&quot;headerlink&quot; title=&quot;Operator 模块函数&quot;&gt;&lt;/a&gt;Operator 模块函数&lt;/h3&gt;&lt;p&gt;上面的&lt;code&gt;key&lt;/code&gt;参数的使用非常广泛，因此python提供了一些方便的函数来使得访问方法更加容易和快速。&lt;code&gt;operator&lt;/code&gt;模块有&lt;code&gt;itemgetter&lt;/code&gt;，&lt;code&gt;attrgetter&lt;/code&gt;，从2.6开始还增加了&lt;code&gt;methodcaller&lt;/code&gt;方法。使用这些方法，上面的操作将变得更加简洁和快速：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; itemgetter, attrgetter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_tuples, key=itemgetter(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_objects, key=attrgetter(&lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;operator&lt;/code&gt;模块还允许多级的排序，例如，先以&lt;code&gt;grade&lt;/code&gt;，然后再以&lt;code&gt;age&lt;/code&gt;来排序：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_tuples, key=itemgetter(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_objects, key=attrgetter(&lt;span class=&quot;string&quot;&gt;&#39;grade&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;升序和降序&quot;&gt;&lt;a href=&quot;#升序和降序&quot; class=&quot;headerlink&quot; title=&quot;升序和降序&quot;&gt;&lt;/a&gt;升序和降序&lt;/h3&gt;&lt;p&gt;&lt;code&gt;list.sort()&lt;/code&gt;和&lt;code&gt;sorted()&lt;/code&gt;都接受一个参数&lt;code&gt;reverse（True or False）&lt;/code&gt;来表示升序或降序排序。例如对上面的&lt;code&gt;student&lt;/code&gt;降序排序如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_tuples, key=itemgetter(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), reverse=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_objects, key=attrgetter(&lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;), reverse=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;排序的稳定性和复杂排序&quot;&gt;&lt;a href=&quot;#排序的稳定性和复杂排序&quot; class=&quot;headerlink&quot; title=&quot;排序的稳定性和复杂排序&quot;&gt;&lt;/a&gt;排序的稳定性和复杂排序&lt;/h3&gt;&lt;p&gt;从python2.2开始，排序被保证为稳定的。意思是说多个元素如果有相同的&lt;code&gt;key&lt;/code&gt;，则排序前后他们的先后顺序不变。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = [(&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(data, key=itemgetter(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意在排序后&lt;code&gt;&amp;#39;blue&amp;#39;&lt;/code&gt;的顺序被保持了，即&lt;code&gt;&amp;#39;blue&amp;#39;&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;在&lt;code&gt;&amp;#39;blue&amp;#39;&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;的前面。&lt;/p&gt;
&lt;p&gt;更复杂地你可以构建多个步骤来进行更复杂的排序，例如对&lt;code&gt;student&lt;/code&gt;数据先以&lt;code&gt;grade&lt;/code&gt;降序排列，然后再以&lt;code&gt;age&lt;/code&gt;升序排列。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;s = sorted(student_objects, key=attrgetter(&lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;))     &lt;span class=&quot;comment&quot;&gt;# sort on secondary key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(s, key=attrgetter(&lt;span class=&quot;string&quot;&gt;&#39;grade&#39;&lt;/span&gt;), reverse=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)       &lt;span class=&quot;comment&quot;&gt;# now sort on primary key, descending&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;最老土的排序方法-DSU&quot;&gt;&lt;a href=&quot;#最老土的排序方法-DSU&quot; class=&quot;headerlink&quot; title=&quot;最老土的排序方法-DSU&quot;&gt;&lt;/a&gt;最老土的排序方法-DSU&lt;/h2&gt;&lt;p&gt;我们称其为DSU（Decorate-Sort-Undecorate）,原因为排序的过程需要下列三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对原始的list进行装饰，使得新list的值可以用来控制排序；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对装饰后的list排序；&lt;/li&gt;
&lt;li&gt;将装饰删除，将排序后的装饰list重新构建为原来类型的list；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，使用DSU方法来对&lt;code&gt;student&lt;/code&gt;数据根据&lt;code&gt;grade&lt;/code&gt;排序：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;decorated = [(student.grade, i, student) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, student &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(student_objects)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;decorated.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[student &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; grade, i, student &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; decorated]               &lt;span class=&quot;comment&quot;&gt;# undecorate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的比较能够工作，原因是&lt;code&gt;tuples&lt;/code&gt;是可以用来比较，&lt;code&gt;tuples&lt;/code&gt;间的比较首先比较&lt;code&gt;tuples&lt;/code&gt;的第一个元素，如果第一个相同再比较第二个元素，以此类推。&lt;/p&gt;
&lt;p&gt;并不是所有的情况下都需要在以上的&lt;code&gt;tuples&lt;/code&gt;中包含索引，但是包含索引可以有以下好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;排序是稳定的，如果两个元素有相同的key，则他们的原始先后顺序保持不变；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;原始的元素不必用来做比较，因为tuples的第一和第二元素用来比较已经是足够了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此方法被RandalL.在perl中广泛推广后，他的另一个名字为也被称为Schwartzian transform。&lt;/p&gt;
&lt;p&gt;对大的list或list的元素计算起来太过复杂的情况下，在python2.4前，DSU很可能是最快的排序方法。但是在2.4之后，上面解释的key函数提供了类似的功能。&lt;/p&gt;
&lt;h2 id=&quot;其他语言普遍使用的排序方法-cmp函数&quot;&gt;&lt;a href=&quot;#其他语言普遍使用的排序方法-cmp函数&quot; class=&quot;headerlink&quot; title=&quot;其他语言普遍使用的排序方法-cmp函数&quot;&gt;&lt;/a&gt;其他语言普遍使用的排序方法-cmp函数&lt;/h2&gt;&lt;p&gt;在python2.4前，&lt;code&gt;sorted()&lt;/code&gt;和&lt;code&gt;list.sort()&lt;/code&gt;函数没有提供&lt;code&gt;key&lt;/code&gt;参数，但是提供了&lt;code&gt;cmp&lt;/code&gt;参数来让用户指定比较函数。此方法在其他语言中也普遍存在。&lt;br&gt;在python3.0中，&lt;code&gt;cmp&lt;/code&gt;参数被彻底的移除了，从而简化和统一语言，减少了高级比较和&lt;code&gt;__cmp__&lt;/code&gt;方法的冲突。&lt;br&gt;在python2.x中&lt;code&gt;cmp&lt;/code&gt;参数指定的函数用来进行元素间的比较。此函数需要2个参数，然后返回负数表示小于，0表示等于，正数表示大于。例如：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numeric_compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x - y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted([&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], cmp=numeric_compare)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者你可以反序排序：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverse_numeric&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; y - x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted([&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], cmp=reverse_numeric)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当我们将现有的2.x的代码移植到3.x时，需要将&lt;code&gt;cmp&lt;/code&gt;函数转化为&lt;code&gt;key&lt;/code&gt;函数，以下的&lt;code&gt;wrapper&lt;/code&gt;很有帮助：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cmp_to_key&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(mycmp)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Convert a cmp= function into a key= function&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, obj, *args)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.obj = obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__lt__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, other)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mycmp(self.obj, other.obj) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__gt__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, other)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mycmp(self.obj, other.obj) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, other)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mycmp(self.obj, other.obj) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__le__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, other)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mycmp(self.obj, other.obj) &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__ge__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, other)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mycmp(self.obj, other.obj) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__ne__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, other)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mycmp(self.obj, other.obj) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; K&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当需要将&lt;code&gt;cmp&lt;/code&gt;转化为&lt;code&gt;key&lt;/code&gt;时，只需要：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted([&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], key=cmp_to_key(reverse_numeric))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从python2.7，&lt;code&gt;cmp_to_key()&lt;/code&gt;函数被增加到了&lt;code&gt;functools&lt;/code&gt;模块中。&lt;/p&gt;
&lt;h2 id=&quot;其他注意事项&quot;&gt;&lt;a href=&quot;#其他注意事项&quot; class=&quot;headerlink&quot; title=&quot;其他注意事项&quot;&gt;&lt;/a&gt;其他注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对需要进行区域相关的排序时，可以使用locale.strxfrm()作为key函数，或者使用local.strcoll()作为cmp函数。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reverse参数任然保持了排序的稳定性，有趣的时，同样的效果可以使用reversed()函数两次来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = [(&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; sorted(data, reverse=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;) == list(reversed(sorted(reversed(data))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其实排序在内部是调用元素的&lt;code&gt;__cmp__&lt;/code&gt;来进行的，所以我们可以为元素类型增加&lt;code&gt;__cmp__&lt;/code&gt;方法使得元素可比较，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Student.__lt__ = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; self, other: self.age &amp;lt; other.age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(student_objects)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;key函数不仅可以访问需要排序元素的内部数据，还可以访问外部的资源，例如，如果学生的成绩是存储在&lt;code&gt;dict&lt;/code&gt;中的，则可以使用此&lt;code&gt;dict&lt;/code&gt;来对学生名字的&lt;code&gt;list&lt;/code&gt;排序，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;students = [&lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;newgrades = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(students, key=newgrades.__getitem__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;jane&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dave&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当你需要在处理数据的同时进行排序的话，&lt;code&gt;sort()&lt;/code&gt;,&lt;code&gt;sorted()&lt;/code&gt;或&lt;code&gt;bisect.insort()&lt;/code&gt;不是最好的方法。在这种情况下，可以使用&lt;code&gt;heap&lt;/code&gt;，&lt;code&gt;red-black tree&lt;/code&gt;或&lt;code&gt;treap&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础货&quot;&gt;&lt;a href=&quot;#基础货&quot; class=&quot;headerlink&quot; title=&quot;基础货&quot;&gt;&lt;/a&gt;基础货&lt;/h2&gt;&lt;p&gt;Python &lt;code&gt;list&lt;/code&gt;内置&lt;code&gt;sort()&lt;/code&gt;方法用来排序，也可以用python内置的全局&lt;code&gt;sorted()&lt;/code&gt;方法来对可迭代的序列排序生成新的序列。&lt;/p&gt;
&lt;h3 id=&quot;排序基础&quot;&gt;&lt;a href=&quot;#排序基础&quot; class=&quot;headerlink&quot; title=&quot;排序基础&quot;&gt;&lt;/a&gt;排序基础&lt;/h3&gt;&lt;p&gt;简单的升序排序是非常容易的。只需要调用&lt;code&gt;sorted()&lt;/code&gt;方法。它返回一个新的&lt;code&gt;list&lt;/code&gt;，新的&lt;code&gt;list&lt;/code&gt;的元素基于小于运算符&lt;code&gt;__lt__&lt;/code&gt;来排序。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted([&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也可以使用&lt;code&gt;list.sort()&lt;/code&gt;方法来排序，此时&lt;code&gt;list&lt;/code&gt;本身将被修改。通常此方法不如&lt;code&gt;sorted()&lt;/code&gt;方便，但是如果你不需要保留原来的&lt;code&gt;list&lt;/code&gt;，此方法将更有效。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一个不同就是&lt;code&gt;list.sort()&lt;/code&gt;方法仅被定义在&lt;code&gt;list&lt;/code&gt;中，相反地&lt;code&gt;sorted()&lt;/code&gt;方法对所有的可迭代序列都有效。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sorted(&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;key参数-函数&quot;&gt;&lt;a href=&quot;#key参数-函数&quot; class=&quot;headerlink&quot; title=&quot;key参数/函数&quot;&gt;&lt;/a&gt;key参数/函数&lt;/h3&gt;&lt;p&gt;从python2.4开始，&lt;code&gt;list.sort()&lt;/code&gt;和&lt;code&gt;sorted()&lt;/code&gt;函数增加了&lt;code&gt;key&lt;/code&gt;参数来指定一个函数，此函数将在每个元素比较前被调用。 例如通过&lt;code&gt;key&lt;/code&gt;指定的函数来忽略字符串的大小写：&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.vitostack.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.vitostack.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop上跑MapReduce的Python示例</title>
    <link href="http://www.vitostack.com/2016/05/05/python-map-reduce-on-hadoop/"/>
    <id>http://www.vitostack.com/2016/05/05/python-map-reduce-on-hadoop/</id>
    <published>2016-05-05T15:15:21.000Z</published>
    <updated>2016-05-05T16:08:01.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;   在这个实例中，我将会向大家介绍如何使用Python 为Hadoop编写一个简单的MapReduce&lt;br&gt;程序。尽管Hadoop框架是使用Java编写的但是我们仍然需要使用像C++、Python等语言来实现Hadoop程序。&lt;br&gt;尽管Hadoop官方网站给的示例程序是使用Jython编写并打包成Jar文件，这样显然造成了不便，&lt;br&gt;其实，不一定非要这样来实现，我们可以使用Python与Hadoop关联进行编程，看看位于&lt;code&gt;/src/examples/python/WordCount.py&lt;/code&gt;的例子，&lt;br&gt;你将了解到我在说什么。我们想要做什么？我们将编写一个简单的 MapReduce 程序，使用的是C-Python，而不是Jython编写后打包成jar包的程序。&lt;br&gt;我们的这个例子将模仿 WordCount 并使用Python来实现，例子通过读取文本文件来统计出单词的出现次数。结果也以文本形式输出，&lt;br&gt;每一行包含一个单词和单词出现的次数，两者中间使用制表符来想间隔。先决条件编写这个程序之前，你学要架设好Hadoop 集群，&lt;br&gt;这样才能不会在后期工作抓瞎。如果你没有架设好，那么在后面有个简明教程来教你在Ubuntu Linux 上搭建（同样适用于其他发行版linux、unix）&lt;br&gt;如何使用Hadoop Distributed File System (HDFS)在Ubuntu Linux 建立单节点的 Hadoop 集群如何使用&lt;br&gt;Hadoop Distributed File System (HDFS)在Ubuntu Linux 建立多节点的 Hadoop 集群.&lt;br&gt;Python的MapReduce代码使用Python编写MapReduce代码的技巧就在于我们使用了&lt;code&gt;HadoopStreaming&lt;/code&gt;来帮助我们在Map 和 Reduce&lt;br&gt;间传递数据通过STDIN (标准输入)和STDOUT (标准输出).我们仅仅使用Python的&lt;code&gt;sys.stdin&lt;/code&gt;来输入数据，使用&lt;code&gt;sys.stdout&lt;/code&gt;输出数据，&lt;br&gt;这样做是因为&lt;code&gt;HadoopStreaming&lt;/code&gt;会帮我们办好其他事。这是真的，别不相信！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Map-mapper-py&quot;&gt;&lt;a href=&quot;#Map-mapper-py&quot; class=&quot;headerlink&quot; title=&quot;Map: mapper.py&quot;&gt;&lt;/a&gt;Map: mapper.py&lt;/h2&gt;&lt;p&gt;将下列的代码保存在&lt;code&gt;/home/hadoop/mapper.py&lt;/code&gt;中，他将从STDIN读取数据并将单词成行分隔开，生成一个列表映射单词与发生次数的关系：注意：要确保这个脚本有足够权限（&lt;code&gt;chmod +x /home/hadoop/mapper.py&lt;/code&gt;）。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# input comes from STDIN (standard input)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sys.stdin:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# remove leading and trailing whitespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    line = line.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# split the line into words&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    words = line.split()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# increase counters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; word &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; words:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# write the results to STDOUT (standard output);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# what we output here will be the input for the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Reduce step, i.e. the input for reducer.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# tab-delimited; the trivial word count is 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%s\\t%s&#39;&lt;/span&gt; % (word, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个脚本中，并不计算出单词出现的总数，它将快速的输出 “&lt;word&gt; 1” ，尽管&lt;word&gt;可能会在输入中出现多次，计算是留给后来的Reduce步骤（或叫做程序）来实现。当然你可以改变下编码风格，完全尊重你的习惯。&lt;/word&gt;&lt;/word&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reduce-reducer-py&quot;&gt;&lt;a href=&quot;#Reduce-reducer-py&quot; class=&quot;headerlink&quot; title=&quot;Reduce: reducer.py&quot;&gt;&lt;/a&gt;Reduce: reducer.py&lt;/h2&gt;&lt;p&gt;将代码存储在&lt;code&gt;/home/hadoop/reducer.py&lt;/code&gt; 中，这个脚本的作用是从&lt;code&gt;mapper.py&lt;/code&gt; 的STDIN中读取结果，然后计算每个单词出现次数的总和，并输出结果到STDOUT。同样，要注意脚本权限：&lt;code&gt;chmod +x /home/hadoop/reducer.py&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; itemgetter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# maps words to their counts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;word2count = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# input comes from STDIN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sys.stdin:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# remove leading and trailing whitespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    line = line.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# parse the input we got from mapper.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    word, count = line.split(&lt;span class=&quot;string&quot;&gt;&#39;\\t&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# convert count (currently a string) to int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count = int(count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        word2count[word] = word2count.get(word, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# count was not a number, so silently&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# ignore/discard this line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# sort the words lexigraphically;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# this step is NOT required, we just do it so that our&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# final output will look more like the official Hadoop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# word count examples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sorted_word2count = sorted(word2count.items(), key=itemgetter(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# write the results to STDOUT (standard output)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; word, count &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sorted_word2count:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%s\\t%s&#39;&lt;/span&gt;% (word, count)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试你的代码&quot;&gt;&lt;a href=&quot;#测试你的代码&quot; class=&quot;headerlink&quot; title=&quot;测试你的代码&quot;&gt;&lt;/a&gt;测试你的代码&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cat data | map | sort | reduce&lt;/code&gt;&lt;br&gt;我建议你在运行MapReduce job测试前尝试手工测试你的&lt;code&gt;mapper.py&lt;/code&gt; 和 &lt;code&gt;reducer.py&lt;/code&gt; 脚本，以免得不到任何返回结果这里有一些建议，关于如何测试你的Map和Reduce的功能：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hadoop@ubuntu:~$ echo &amp;quot;foo foo quux labs foo bar quux&amp;quot; | /home/hadoop/mapper.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;foo     1&lt;br&gt;foo     1&lt;br&gt;quux    1&lt;br&gt;labs    1&lt;br&gt;foo     1&lt;br&gt;bar     1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;hadoop@ubuntu:~$ echo &amp;quot;foo foo quux labs foo bar quux&amp;quot; | /home/hadoop/mapper.py | sort | /home/hadoop/reducer.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bar     1&lt;br&gt;foo     3&lt;br&gt;labs    1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt; &lt;em&gt;using on[object Object]e of the ebooks as example input&lt;/em&gt;&lt;br&gt; &lt;em&gt;(see below on where to get the ebooks&lt;/em&gt;&lt;br&gt;&lt;code&gt;hadoop@ubuntu:~$ cat /tmp/gutenberg/20417-8.txt | /home/hadoop/mapper.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The     1&lt;br&gt;Project 1&lt;br&gt;Gutenberg       1&lt;br&gt;EBook   1&lt;br&gt;of      1&lt;br&gt;[…]&lt;br&gt;(you get the idea)&lt;/p&gt;
&lt;p&gt;quux    2&lt;/p&gt;
&lt;p&gt;quux    1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;为了这个例子，我们将需要三种电子书：&lt;br&gt;下载他们，并使用us-ascii编码存储 解压后的文件，保存在临时目录，比如&lt;code&gt;/tmp/gutenberg&lt;/code&gt;.&lt;br&gt;&lt;code&gt;hadoop@ubuntu:~$ ls -l /tmp/gutenberg/&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;total 3592&lt;br&gt;-rw-r–r– 1 hadoop hadoop  674425 2007-01-22 12:56 20417-8.txt&lt;br&gt;-rw-r–r– 1 hadoop hadoop 1423808 2006-08-03 16:36 7ldvc10.txt&lt;br&gt;-rw-r–r– 1 hadoop hadoop 1561677 2004-11-26 09:48 ulyss12.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;hadoop@ubuntu:~$&lt;/code&gt;&lt;br&gt;在我们运行MapReduce job 前，我们需要将本地的文件复制到HDFS中：&lt;/p&gt;
&lt;p&gt; &lt;code&gt;hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop dfs -copyFromLocal /tmp/gutenberg gutenberg&lt;/code&gt;&lt;br&gt; &lt;code&gt;hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop dfs -ls&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Found 1 items&lt;br&gt;/user/hadoop/gutenberg  &lt;dir&gt;&lt;/dir&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop dfs -ls gutenberg&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Found 3 items&lt;br&gt;/user/hadoop/gutenberg/20417-8.txt      &lt;r 1=&quot;&quot;&gt;   674425&lt;br&gt;/user/hadoop/gutenberg/7ldvc10.txt      &lt;r 1=&quot;&quot;&gt;   1423808&lt;br&gt;/user/hadoop/gutenberg/ulyss12.txt      &lt;r 1=&quot;&quot;&gt;   1561677&lt;/r&gt;&lt;/r&gt;&lt;/r&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在，一切准备就绪，我们将在运行Python MapReduce job 在Hadoop集群上。像我上面所说的，我们使用的是帮助我们传递数据在Map和Reduce间并通过STDIN和STDOUT，进行标准化输入输出。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop jar contrib/streaming/hadoop-0.19.1-streaming.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -mapper /home/hadoop/mapper.py &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -reducer /home/hadoop/reducer.py &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -input gutenberg/* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -output gutenberg-output&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在运行中，如果你想更改Hadoop的一些设置，如增加Reduce任务的数量，你可以使用“-hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop jar contrib/streaming/hadoop-0.19.1-streaming.jar&lt;br&gt; -mapper …&lt;/p&gt;
&lt;p&gt;一个重要的备忘是关于这个任务将会读取HDFS目录下的HDFS目录下的目录。&lt;br&gt;之前执行的结果如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop jar contrib/streaming/hadoop-0.19.1-streaming.jar &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -mapper /home/hadoop/mapper.py -reducer /home/hadoop/reducer.py -input gutenberg/* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -output gutenberg-output&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;additionalConfSpec&lt;em&gt;:null&lt;br&gt; null=@@@userJobConfProps&lt;/em&gt;.get(stream.shipped.hadoopstreaming&lt;br&gt; packageJobJar: [/usr/local/hadoop-datastore/hadoop-hadoop/hadoop-unjar54543/]&lt;br&gt; [] /tmp/streamjob54544.jar tmpDir=null&lt;br&gt; […] INFO mapred.FileInputFormat: Total input paths to process : 7&lt;br&gt; […] INFO streaming.StreamJob: getLocalDirs(): [/usr/local/hadoop-datastore/hadoop-hadoop/mapred/local]&lt;br&gt; […] INFO streaming.StreamJob: Running job: job_200803031615_0021&lt;br&gt; […]&lt;br&gt; […] INFO streaming.StreamJob:  map 0%  reduce 0%&lt;br&gt; […] INFO streaming.StreamJob:  map 43%  reduce 0%&lt;br&gt; […] INFO streaming.StreamJob:  map 86%  reduce 0%&lt;br&gt; […] INFO streaming.StreamJob:  map 100%  reduce 0%&lt;br&gt; […] INFO streaming.StreamJob:  map 100%  reduce 33%&lt;br&gt; […] INFO streaming.StreamJob:  map 100%  reduce 70%&lt;br&gt; […] INFO streaming.StreamJob:  map 100%  reduce 77%&lt;br&gt; […] INFO streaming.StreamJob:  map 100%  reduce 100%&lt;br&gt; […] INFO streaming.StreamJob: Job complete: job_200803031615_0021&lt;/p&gt;
&lt;p&gt; […] INFO streaming.StreamJob: Output: gutenberg-output  hadoop@ubuntu:/usr/local/hadoop$ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正如你所见到的上面的输出结果，Hadoop 同时还提供了一个基本的WEB接口显示统计结果和信息。&lt;br&gt;当Hadoop集群在执行时，你可以使用浏览器访问,检查结果是否输出并存储在HDFS目录下的中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop dfs -ls gutenberg-output&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Found 1 items&lt;br&gt;/user/hadoop/gutenberg-output/part-00000     &lt;r 1=&quot;&quot;&gt;   903193  2007-09-21 13:00&lt;br&gt;hadoop@ubuntu:/usr/local/hadoop$ &lt;/r&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以使用 命令检查文件目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop dfs -cat gutenberg-output/part-00000&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“(Lo)cra”       1&lt;br&gt;“1490   1&lt;br&gt;“1498,” 1&lt;br&gt;“35”    1&lt;br&gt;“40,”   1&lt;br&gt;“A      2&lt;br&gt;“AS-IS”.        2&lt;br&gt;“A_     1&lt;br&gt;“Absoluti       1&lt;br&gt;[…]&lt;br&gt;hadoop@ubuntu:/usr/local/hadoop$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意比输出，上面结果的(“)符号不是Hadoop插入的。&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;   在这个实例中，我将会向大家介绍如何使用Python 为Hadoop编写一个简单的MapReduce&lt;br&gt;程序。尽管Hadoop框架是使用Java编写的但是我们仍然需要使用像C++、Python等语言来实现Hadoop程序。&lt;br&gt;尽管Had
    
    </summary>
    
      <category term="Hadoop" scheme="http://www.vitostack.com/categories/Hadoop/"/>
    
    
      <category term="python" scheme="http://www.vitostack.com/tags/python/"/>
    
      <category term="hadoop" scheme="http://www.vitostack.com/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.vitostack.com/tags/mapreduce/"/>
    
  </entry>
  
  <entry>
    <title>介绍一个python扩展库-pyextend lib</title>
    <link href="http://www.vitostack.com/2016/05/04/pyextend-lib/"/>
    <id>http://www.vitostack.com/2016/05/04/pyextend-lib/</id>
    <published>2016-05-04T14:05:31.000Z</published>
    <updated>2016-05-04T14:40:35.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;python 扩展库 &lt;a href=&quot;https://github.com/Vito2015/pyextend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyextend&lt;/a&gt;&lt;br&gt;pyextend 是 &lt;a href=&quot;http://www.vitostack.com/&quot;&gt;Vito&lt;/a&gt; 整理的比较有用的 python 扩展包，Github 地址 &lt;a href=&quot;https://github.com/Vito2015/pyextend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Vito2015/pyextend&lt;/a&gt;，欢迎fork 欢迎 Pull Request，一起丰富。&lt;br&gt;&lt;a href=&quot;https://github.com/Vito2015/pyextend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyextend&lt;/a&gt; 支持 py2 和 py3 项目已经发布到 &lt;strong&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pyextend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pypi&lt;/a&gt;&lt;/strong&gt; ,截止发稿日期已经是 &lt;em&gt;0.1.24&lt;/em&gt; 版本&lt;/p&gt;
&lt;h3 id=&quot;安装方式：&quot;&gt;&lt;a href=&quot;#安装方式：&quot; class=&quot;headerlink&quot; title=&quot;安装方式：&quot;&gt;&lt;/a&gt;安装方式：&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pip install pyextend&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;accepts函数参数检查&quot;&gt;&lt;a href=&quot;#accepts函数参数检查&quot; class=&quot;headerlink&quot; title=&quot;accepts函数参数检查&quot;&gt;&lt;/a&gt;accepts函数参数检查&lt;/h2&gt;&lt;p&gt;&lt;code&gt;accepts(exception=TypeError, **types)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参数:&lt;br&gt;&lt;code&gt;exception&lt;/code&gt;: 检查失败时的抛出异常类型&lt;br&gt;&lt;code&gt;**types&lt;/code&gt;: 待检查的k-v参数&lt;br&gt;&lt;code&gt;**types&lt;/code&gt;参数支持&lt;br&gt;&lt;code&gt;a=int&lt;/code&gt; : 待测函数参数 &lt;code&gt;a&lt;/code&gt; 必须为 &lt;code&gt;int&lt;/code&gt; 类型, 否则检查失败&lt;br&gt;&lt;code&gt;b=&amp;#39;__iter__&amp;#39;&lt;/code&gt; : 待测参数 &lt;code&gt;b&lt;/code&gt; 必须为 实现 &lt;code&gt;__iter__&lt;/code&gt; 函数的 &lt;code&gt;iterable&lt;/code&gt; 类型&lt;br&gt;&lt;code&gt;c=(&amp;#39;__iter__&amp;#39;, None)&lt;/code&gt; : 待测参数 &lt;code&gt;c&lt;/code&gt; 必须为实现 &lt;code&gt;__iter__&lt;/code&gt;函数的 &lt;code&gt;iterable&lt;/code&gt;类型或者 &lt;code&gt;None&lt;/code&gt;.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;e-g&quot;&gt;&lt;a href=&quot;#e-g&quot; class=&quot;headerlink&quot; title=&quot;e.g&quot;&gt;&lt;/a&gt;e.g&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        @accepts(a=int, b=&#39;__iter__&#39;, c=str)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b=None, c=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&#39;accepts OK&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test(&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, b=[], c=&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;)  -- OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test(&lt;span class=&quot;string&quot;&gt;&#39;aaa&#39;&lt;/span&gt;, b=(), c=&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;) --Failed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Example &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        @accepts(a=int, b=(&#39;__iter__&#39;, None), c=str)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b=None, c=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&#39;accepts OK&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test(&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, b=[], c=&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;)  -- OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test(&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, b=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;)  -- OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;source-code&quot;&gt;&lt;a href=&quot;#source-code&quot; class=&quot;headerlink&quot; title=&quot;source code&quot;&gt;&lt;/a&gt;source code&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accepts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(exception=TypeError, **types)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A wrapper of function for checking function parameters type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;check_param&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(v, type_or_funcname)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isinstance(type_or_funcname, tuple):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            results1 = [check_param(v, t) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; type_or_funcname &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            results2 = [v == t &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; type_or_funcname &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; any(results1) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; any(results2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        is_type_instance, is_func_like = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            is_type_instance = isinstance(v, type_or_funcname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; TypeError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isinstance(type_or_funcname, str):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; type_or_funcname == &lt;span class=&quot;string&quot;&gt;&#39;__iter__&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; isinstance(v, str) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; version_info &amp;lt; (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# at py 2.x, str object has non `__iter__` attribute,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# str object can use like `for c in s`, bcz `iter(s)` returns an iterable object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                is_func_like = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                is_func_like = hasattr(v, type_or_funcname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; is_type_instance &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; is_func_like&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;check_accepts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; len(types) &amp;lt;= f.__code__.co_argcount,\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;accept number of arguments not equal with function number of arguments in &quot;&amp;#123;&amp;#125;&quot;&#39;&lt;/span&gt;.format(f.__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        @functools.wraps(f)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new_f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, v &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(args):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; f.__code__.co_varnames[i] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; types &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; check_param(v, types[f.__code__.co_varnames[i]]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; exception(&lt;span class=&quot;string&quot;&gt;&quot;function &#39;%s&#39; arg &#39;%s&#39;=%r does not match %s&quot;&lt;/span&gt; %&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    (f.__name__, f.__code__.co_varnames[i], v, types[f.__code__.co_varnames[i]]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; types[f.__code__.co_varnames[i]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; kwargs.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; types &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; check_param(v, types[k]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; exception(&lt;span class=&quot;string&quot;&gt;&quot;function &#39;%s&#39; arg &#39;%s&#39;=%r does not match %s&quot;&lt;/span&gt; % (f.__name__, k, v, types[k]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f(*args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; new_f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; check_accepts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;unpack-列表集合字符串解包函数&quot;&gt;&lt;a href=&quot;#unpack-列表集合字符串解包函数&quot; class=&quot;headerlink&quot; title=&quot;unpack 列表集合字符串解包函数&quot;&gt;&lt;/a&gt;unpack 列表集合字符串解包函数&lt;/h2&gt;&lt;p&gt;&lt;code&gt;unpack (iterable, count, fill=None)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参数:&lt;br&gt;&lt;code&gt;iterable&lt;/code&gt;: 实现 &lt;code&gt;__iter__&lt;/code&gt;的可迭代对象, 如 &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;&lt;br&gt;&lt;code&gt;count&lt;/code&gt;:    需要拆分的数量, 如数值大于 &lt;code&gt;len(iterable)&lt;/code&gt; 则使用 &lt;code&gt;fill&lt;/code&gt; 的值进行后续填充&lt;br&gt;&lt;code&gt;fill&lt;/code&gt;:          默认值填充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;e-g：&quot;&gt;&lt;a href=&quot;#e-g：&quot; class=&quot;headerlink&quot; title=&quot;e.g：&quot;&gt;&lt;/a&gt;e.g：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        In[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]: source = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        In[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]: a, b = unpack(source, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        In[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]: print(a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        In[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]: source = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        In[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]: a, b, c, d = unpack(source, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        In[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]: print(a, b, c, d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a b &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;source-code-1&quot;&gt;&lt;a href=&quot;#source-code-1&quot; class=&quot;headerlink&quot; title=&quot;source code&quot;&gt;&lt;/a&gt;source code&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@accepts(iterable=&#39;__iter__&#39;, count=int)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(iterable, count, fill=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    The iter data unpack function.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    iterable = list(enumerate(iterable))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cnt = count &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; count &amp;lt;= len(iterable) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; len(iterable)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    results = [iterable[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(cnt)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# results[len(results):len(results)] = [fill for i in range(count-cnt)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    results = merge(results, [fill &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(count-cnt)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tuple(results)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;merge可迭代对象合并函数&quot;&gt;&lt;a href=&quot;#merge可迭代对象合并函数&quot; class=&quot;headerlink&quot; title=&quot;merge可迭代对象合并函数&quot;&gt;&lt;/a&gt;merge可迭代对象合并函数&lt;/h2&gt;&lt;p&gt;&lt;code&gt;merge (iterable1, *args)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参数:&lt;br&gt;&lt;code&gt;iterable1&lt;/code&gt;: 实现 &lt;code&gt;__iter__&lt;/code&gt;的可迭代对象, 如 &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;&lt;br&gt;&lt;code&gt;*args&lt;/code&gt;: 其他实现 &lt;code&gt;__iter__&lt;/code&gt;的可迭代对象&lt;br&gt;返回值: 合并后的迭代对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;e-g-1&quot;&gt;&lt;a href=&quot;#e-g-1&quot; class=&quot;headerlink&quot; title=&quot;e.g&quot;&gt;&lt;/a&gt;e.g&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = merge(source, [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(result, [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = merge(source, [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(result, [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Example &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = merge(source, &lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(result, &lt;span class=&quot;string&quot;&gt;&#39;abc123&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = merge(source, &lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;xyz&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(result, &lt;span class=&quot;string&quot;&gt;&#39;abc123xyz&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Example &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = (&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = merge(source, (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(result, (&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = merge(source, (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(result, (&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Example &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = merge(source, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;n&#39;&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(result, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;n&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;source-code-2&quot;&gt;&lt;a href=&quot;#source-code-2&quot; class=&quot;headerlink&quot; title=&quot;source code&quot;&gt;&lt;/a&gt;source code&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@accepts(iterable1=&#39;__iter__&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(iterable1, *args)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Returns an type of iterable1 value, which merged after iterable1 used *args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :exception TypeError: if any parameter type of args not equals type(iterable1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result_list = list(iterable1) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; isinstance(iterable1, dict) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; eval(&lt;span class=&quot;string&quot;&gt;&#39;list(iterable1.items())&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, other &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(args, start=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; isinstance(other, type(iterable1)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;string&quot;&gt;&#39;the parameter type of index &amp;#123;&amp;#125; not equals type of index 0&#39;&lt;/span&gt;.format(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; isinstance(other, dict):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result_list[len(result_list):len(result_list)] = list(other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result_list[len(result_list):len(result_list)] = list(other.items())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isinstance(iterable1, str):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;.join(result_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; isinstance(iterable1, tuple):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tuple(result_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; isinstance(iterable1, dict):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dict(result_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result_list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Others&quot;&gt;&lt;a href=&quot;#Others&quot; class=&quot;headerlink&quot; title=&quot;Others&quot;&gt;&lt;/a&gt;Others&lt;/h2&gt;&lt;p&gt;更多内容请见&lt;a href=&quot;https://github.com/Vito2015/pyextend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vito’s Github&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;版权所有，欢迎转载。转载请以超链接形式保留原文链接！&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;&lt;em&gt;&lt;a href=&quot;http://www.vitostack.com/2016/05/04/pyextend-lib/&quot;&gt;http://www.vitostack.com/2016/05/04/pyextend-lib/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;python 扩展库 &lt;a href=&quot;https://github.com/Vito2015/pyextend&quot;&gt;pyextend&lt;/a&gt;&lt;br&gt;pyextend 是 &lt;a href=&quot;http://www.vitostack.com/&quot;&gt;Vito&lt;/a&gt; 整理的比较有用的 python 扩展包，Github 地址 &lt;a href=&quot;https://github.com/Vito2015/pyextend&quot;&gt;https://github.com/Vito2015/pyextend&lt;/a&gt;，欢迎fork 欢迎 Pull Request，一起丰富。&lt;br&gt;&lt;a href=&quot;https://github.com/Vito2015/pyextend&quot;&gt;pyextend&lt;/a&gt; 支持 py2 和 py3 项目已经发布到 &lt;strong&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pyextend&quot;&gt;pypi&lt;/a&gt;&lt;/strong&gt; ,截止发稿日期已经是 &lt;em&gt;0.1.24&lt;/em&gt; 版本&lt;/p&gt;
&lt;h3 id=&quot;安装方式：&quot;&gt;&lt;a href=&quot;#安装方式：&quot; class=&quot;headerlink&quot; title=&quot;安装方式：&quot;&gt;&lt;/a&gt;安装方式：&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pip install pyextend&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;accepts函数参数检查&quot;&gt;&lt;a href=&quot;#accepts函数参数检查&quot; class=&quot;headerlink&quot; title=&quot;accepts函数参数检查&quot;&gt;&lt;/a&gt;accepts函数参数检查&lt;/h2&gt;&lt;p&gt;&lt;code&gt;accepts(exception=TypeError, **types)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参数:&lt;br&gt;&lt;code&gt;exception&lt;/code&gt;: 检查失败时的抛出异常类型&lt;br&gt;&lt;code&gt;**types&lt;/code&gt;: 待检查的k-v参数&lt;br&gt;&lt;code&gt;**types&lt;/code&gt;参数支持&lt;br&gt;&lt;code&gt;a=int&lt;/code&gt; : 待测函数参数 &lt;code&gt;a&lt;/code&gt; 必须为 &lt;code&gt;int&lt;/code&gt; 类型, 否则检查失败&lt;br&gt;&lt;code&gt;b=&amp;#39;__iter__&amp;#39;&lt;/code&gt; : 待测参数 &lt;code&gt;b&lt;/code&gt; 必须为 实现 &lt;code&gt;__iter__&lt;/code&gt; 函数的 &lt;code&gt;iterable&lt;/code&gt; 类型&lt;br&gt;&lt;code&gt;c=(&amp;#39;__iter__&amp;#39;, None)&lt;/code&gt; : 待测参数 &lt;code&gt;c&lt;/code&gt; 必须为实现 &lt;code&gt;__iter__&lt;/code&gt;函数的 &lt;code&gt;iterable&lt;/code&gt;类型或者 &lt;code&gt;None&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.vitostack.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.vitostack.com/tags/python/"/>
    
      <category term="pyextend" scheme="http://www.vitostack.com/tags/pyextend/"/>
    
  </entry>
  
  <entry>
    <title>python数据图表工具多比较</title>
    <link href="http://www.vitostack.com/2016/05/02/python-data-visualization/"/>
    <id>http://www.vitostack.com/2016/05/02/python-data-visualization/</id>
    <published>2016-05-02T06:37:34.000Z</published>
    <updated>2016-05-02T10:56:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Python 的科学栈相当成熟，各种应用场景都有相关的模块，包括机器学习和数据分析。  &lt;/p&gt;
&lt;p&gt;数据可视化是发现数据和展示结果的重要一环，只不过过去以来，相对于 R 这样的工具，发展还是落后一些。    &lt;/p&gt;
&lt;p&gt;幸运的是，过去几年出现了很多新的Python数据可视化库，弥补了一些这方面的差距。matplotlib 已经成为事实上的数据可视化方面最主要的库，此外还有很多其他库，例如vispy，bokeh， seaborn，  pyga， folium 和 networkx，这些库有些是构建在 matplotlib 之上，还有些有其他一些功能。&lt;/p&gt;
&lt;p&gt;本文会基于一份真实的数据，使用这些库来对数据进行可视化。通过这些对比，我们期望了解每个库所适用的范围，以及如何更好的利用整个 Python 的数据可视化的生态系统。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我们在 Dataquest 建了一个交互课程，教你如何使用 Python 的数据可视化工具。如果你打算深入学习，可以点这里。  &lt;/p&gt;
&lt;h2 id=&quot;探索数据集&quot;&gt;&lt;a href=&quot;#探索数据集&quot; class=&quot;headerlink&quot; title=&quot;探索数据集&quot;&gt;&lt;/a&gt;探索数据集&lt;/h2&gt;&lt;p&gt;在我们探讨数据的可视化之前，让我们先来快速的浏览一下我们将要处理的数据集。我们将要使用的数据来自 openflights。我们将要使用航线数据集、机场数据集、航空公司数据集。其中，路径数据的每一行对应的是两个机场之间的飞行路径；机场数据的每一行对应的是世界上的某一个机场，并且给出了相关信息；航空公司的数据的每一行给出的是每一个航空公司。&lt;/p&gt;
&lt;p&gt;首先我们先读取数据：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Import the pandas library.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Read in the airports data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports = pandas.read_csv(&lt;span class=&quot;string&quot;&gt;&quot;airports.csv&quot;&lt;/span&gt;, header=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, dtype=str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports.columns = [&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;city&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;country&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;code&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;icao&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;altitude&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;offset&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dst&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;timezone&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Read in the airlines data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airlines = pandas.read_csv(&lt;span class=&quot;string&quot;&gt;&quot;airlines.csv&quot;&lt;/span&gt;, header=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, dtype=str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airlines.columns = [&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;alias&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;iata&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;icao&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;callsign&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;country&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Read in the routes data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;routes = pandas.read_csv(&lt;span class=&quot;string&quot;&gt;&quot;routes.csv&quot;&lt;/span&gt;, header=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, dtype=str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;routes.columns = [&lt;span class=&quot;string&quot;&gt;&quot;airline&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;airline_id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;source&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dest&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dest_id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;codeshare&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;stops&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;equipment&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些数据没有列的首选项，因此我们通过赋值 &lt;code&gt;column&lt;/code&gt; 属性来添加列的首选项。我们想要将每一列作为字符串进行读取，因为这样做可以简化后续以行 &lt;code&gt;id&lt;/code&gt; 为匹配，对不同的数据框架进行比较的步骤。我们在读取数据时设置了 &lt;code&gt;dtype&lt;/code&gt; 属性值达到这一目的。&lt;/p&gt;
&lt;p&gt;我们可以快速浏览一下每一个数据集的数据框架。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;airports.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;city&lt;/th&gt;
&lt;th&gt;country&lt;/th&gt;
&lt;th&gt;code&lt;/th&gt;
&lt;th&gt;icao&lt;/th&gt;
&lt;th&gt;latitude&lt;/th&gt;
&lt;th&gt;longitude&lt;/th&gt;
&lt;th&gt;altitude&lt;/th&gt;
&lt;th&gt;offset&lt;/th&gt;
&lt;th&gt;dst&lt;/th&gt;
&lt;th&gt;timezone&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Goroka&lt;/td&gt;
&lt;td&gt;Goroka&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;GKA&lt;/td&gt;
&lt;td&gt;AYGA&lt;/td&gt;
&lt;td&gt;-6.081689&lt;/td&gt;
&lt;td&gt;145.391881&lt;/td&gt;
&lt;td&gt;5282&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Madang&lt;/td&gt;
&lt;td&gt;Madang&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;MAG&lt;/td&gt;
&lt;td&gt;AYMD&lt;/td&gt;
&lt;td&gt;-5.207083&lt;/td&gt;
&lt;td&gt;145.788700&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Mount Hagen&lt;/td&gt;
&lt;td&gt;Mount Hagen&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;HGU&lt;/td&gt;
&lt;td&gt;AYMH&lt;/td&gt;
&lt;td&gt;-5.826789&lt;/td&gt;
&lt;td&gt;144.295861&lt;/td&gt;
&lt;td&gt;5388&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Nadzab&lt;/td&gt;
&lt;td&gt;Nadzab&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;LAE&lt;/td&gt;
&lt;td&gt;AYNZ&lt;/td&gt;
&lt;td&gt;-6.569828&lt;/td&gt;
&lt;td&gt;146.726242&lt;/td&gt;
&lt;td&gt;239&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Port Moresby Jacksons Intl&lt;/td&gt;
&lt;td&gt;Port Moresby&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;POM&lt;/td&gt;
&lt;td&gt;AYPY&lt;/td&gt;
&lt;td&gt;-9.443383&lt;/td&gt;
&lt;td&gt;147.220050&lt;/td&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;airlines.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;alias&lt;/th&gt;
&lt;th&gt;iata&lt;/th&gt;
&lt;th&gt;icao&lt;/th&gt;
&lt;th&gt;callsign&lt;/th&gt;
&lt;th&gt;country&lt;/th&gt;
&lt;th&gt;active&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Private flight&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;135 Airways&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;GNL&lt;/td&gt;
&lt;td&gt;GENERAL&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1Time Airline&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;1T&lt;/td&gt;
&lt;td&gt;RNX&lt;/td&gt;
&lt;td&gt;NEXTIME&lt;/td&gt;
&lt;td&gt;South Africa&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2 Sqn No 1 Elementary Flying Training School&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;WYT&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;United Kingdom&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;213 Flight Unit&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;TFU&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;Russia&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;routes.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;airline&lt;/th&gt;
&lt;th&gt;airline_id&lt;/th&gt;
&lt;th&gt;source&lt;/th&gt;
&lt;th&gt;source_id&lt;/th&gt;
&lt;th&gt;dest&lt;/th&gt;
&lt;th&gt;dest_id&lt;/th&gt;
&lt;th&gt;codeshare&lt;/th&gt;
&lt;th&gt;stops&lt;/th&gt;
&lt;th&gt;equipment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;AER&lt;/td&gt;
&lt;td&gt;2965&lt;/td&gt;
&lt;td&gt;KZN&lt;/td&gt;
&lt;td&gt;2990&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;ASF&lt;/td&gt;
&lt;td&gt;2966&lt;/td&gt;
&lt;td&gt;KZN&lt;/td&gt;
&lt;td&gt;2990&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;ASF&lt;/td&gt;
&lt;td&gt;2966&lt;/td&gt;
&lt;td&gt;MRV&lt;/td&gt;
&lt;td&gt;2962&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;CEK&lt;/td&gt;
&lt;td&gt;2968&lt;/td&gt;
&lt;td&gt;KZN&lt;/td&gt;
&lt;td&gt;2990&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;CEK&lt;/td&gt;
&lt;td&gt;2968&lt;/td&gt;
&lt;td&gt;OVB&lt;/td&gt;
&lt;td&gt;4078&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以分别对每一个单独的数据集做许多不同有趣的探索，但是只要将它们结合起来分析才能取得最大的收获。Pandas 将会帮助我们分析数据，因为它能够有效的过滤权值或者通过它来应用一些函数。我们将会深入几个有趣的权值因子，比如分析航空公司和航线。&lt;/p&gt;
&lt;p&gt;那么在此之前我们需要做一些数据清洗的工作。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;routes = routes[routes[&lt;span class=&quot;string&quot;&gt;&quot;airline_id&quot;&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&quot;\\N&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一行命令就确保了我们在 airline_id 这一列只含有数值型数据。&lt;/p&gt;
&lt;h2 id=&quot;制作柱状图&quot;&gt;&lt;a href=&quot;#制作柱状图&quot; class=&quot;headerlink&quot; title=&quot;制作柱状图&quot;&gt;&lt;/a&gt;制作柱状图&lt;/h2&gt;&lt;p&gt;现在我们理解了数据的结构，我们可以进一步地开始描点来继续探索这个问题。首先，我们将要使用 matplotlib 这个工具，matplotlib 是一个相对底层的 Python 栈中的描点库，所以它比其他的工具库要多敲一些命令来做出一个好看的曲线。另外一方面，你可以使用 matplotlib 几乎做出任何的曲线，这是因为它十分的灵活，而灵活的代价就是非常难于使用。&lt;/p&gt;
&lt;p&gt;我们首先通过做出一个柱状图来显示不同的航空公司的航线长度分布。一个柱状图将所有的航线的长度分割到不同的值域，然后对落入到不同的值域范围内的航线进行计数。从中我们可以知道哪些航空公司的航线长，哪些航空公司的航线短。&lt;/p&gt;
&lt;p&gt;为了达到这一点，我们需要首先计算一下航线的长度，第一步就要使用距离公式，我们将会使用余弦半正矢距离公式来计算经纬度刻画的两个点之间的距离。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; math&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;haversine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lon1, lat1, lon2, lat2)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Convert coordinates to floats.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lon1, lat1, lon2, lat2 = [float(lon1), float(lat1), float(lon2), float(lat2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Convert to radians from degrees.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Compute distance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dlon = lon2 - lon1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dlat = lat2 - lat1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = math.sin(dlat/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * math.asin(math.sqrt(a)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    km = &lt;span class=&quot;number&quot;&gt;6367&lt;/span&gt; * c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; km&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们就可以使用一个函数来计算起点机场和终点机场之间的单程距离。我们需要从路线数据框架得到机场数据框架所对应的 &lt;code&gt;source_id&lt;/code&gt; 和 &lt;code&gt;dest_id&lt;/code&gt;，然后与机场的数据集的 &lt;code&gt;id&lt;/code&gt; 列相匹配，然后就只要计算就行了，这个函数是这样的：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calc_dist&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(row)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dist = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Match source and destination to get coordinates.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = airports[airports[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dest = airports[airports[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;dest_id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Use coordinates to compute distance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dist = haversine(dest[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;], dest[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;], source[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;], source[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (ValueError, IndexError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;source_id&lt;/code&gt; 和 &lt;code&gt;dest_id&lt;/code&gt; 列没有有效值的话，那么这个函数会报错。因此我们需要增加 &lt;code&gt;try/catch&lt;/code&gt; 模块对这种无效的情况进行捕捉。&lt;/p&gt;
&lt;p&gt;最后，我们将要使用 pandas 来将距离计算的函数运用到 routes 数据框架。这将会使我们得到包含所有的航线线长度的 pandas 序列，其中航线线的长度都是以公里做单位。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;route_lengths = routes.apply(calc_dist, axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在我们就有了航线距离的序列了，我们将会创建一个柱状图，它将会将数据归类到对应的范围之内，然后计数分别有多少的航线落入到不同的每个范围：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.hist(route_lengths, bins=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/4.png&quot; alt=&quot;柱状图&quot; title=&quot;柱状图&quot;&gt;
&lt;p&gt;我们用 &lt;code&gt;import matplotlib.pyplot as plt&lt;/code&gt;导入 matplotlib 描点函数。然后我们就使用 &lt;code&gt;%matplotlib inline&lt;/code&gt;来设置 matplotlib 在 ipython 的 notebook 中描点，最终我们就利用 &lt;code&gt;plt.hist(route_lengths, bins=20)&lt;/code&gt; 得到了一个柱状图。正如我们看到的，航空公司倾向于运行近距离的短程航线，而不是远距离的远程航线。&lt;/p&gt;
&lt;h2 id=&quot;使用-seaborn&quot;&gt;&lt;a href=&quot;#使用-seaborn&quot; class=&quot;headerlink&quot; title=&quot;使用 seaborn&quot;&gt;&lt;/a&gt;使用 seaborn&lt;/h2&gt;&lt;p&gt;我们可以利用 seaborn 来做类似的描点，seaborn 是一个 Python 的高级库。Seaborn 建立在 matplotlib 的基础之上，做一些类型的描点，这些工作常常与简单的统计工作有关。我们可以基于一个核心的概率密度的期望，使用 &lt;code&gt;distplot&lt;/code&gt; 函数来描绘一个柱状图。一个核心的密度期望是一个曲线 —— 本质上是一个比柱状图平滑一点的，更容易看出其中的规律的曲线。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; seaborn &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;seaborn.distplot(route_lengths, bins=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/5.png&quot; alt=&quot;seaborn&quot; title=&quot;seaborn&quot;&gt;
&lt;p&gt;正如你所看到的那样，seaborn 同时有着更加好看的默认风格。seaborn 不含有与每个 matplotlib 的版本相对应的版本，但是它的确是一个很好的快速描点工具，而且相比于 matplotlib 的默认图表可以更好的帮助我们理解数据背后的含义。如果你想更深入的做一些统计方面的工作的话，seaborn 也不失为一个很好的库。&lt;/p&gt;
&lt;h2 id=&quot;条形图&quot;&gt;&lt;a href=&quot;#条形图&quot; class=&quot;headerlink&quot; title=&quot;条形图&quot;&gt;&lt;/a&gt;条形图&lt;/h2&gt;&lt;p&gt;柱状图也虽然很好，但是有时候我们会需要航空公司的平均路线长度。这时候我们可以使用条形图－－每条航线都会有一个单独的状态条，显示航空公司航线的平均长度。从中我们可以看出哪家是国内航空公司哪家是国际航空公司。我们可以使用pandas，一个python的数据分析库，来算出每个航空公司的平均航线长度。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Put relevant columns into a dataframe.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;route_length_df = pandas.DataFrame(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;length&quot;&lt;/span&gt;: route_lengths, &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: routes[&lt;span class=&quot;string&quot;&gt;&quot;airline_id&quot;&lt;/span&gt;]&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Compute the mean route length per airline.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths = route_length_df.groupby(&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;).aggregate(numpy.mean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Sort by length so we can make a better chart.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths = airline_route_lengths.sort(&lt;span class=&quot;string&quot;&gt;&quot;length&quot;&lt;/span&gt;, ascending=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们首先用航线长度和航空公司的id来搭建一个新的数据框架。我们基于&lt;code&gt;airline_id&lt;/code&gt;把&lt;code&gt;route_length_df&lt;/code&gt;拆分成组，为每个航空公司建立一个大体的数据框架。然后我们调用pandas的&lt;code&gt;aggregate&lt;/code&gt;函数来获取航空公司数据框架中长度列的均值，然后把每个获取到的值重组到一个新的数据模型里。之后把数据模型进行排序，这样就使得拥有最多航线的航空公司拍到了前面。&lt;/p&gt;
&lt;p&gt;这样就可以使用matplotlib把结果画出来。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plt.bar(range(airline_route_lengths.shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]), airline_route_lengths[&lt;span class=&quot;string&quot;&gt;&quot;length&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/6.png&quot; alt=&quot;条形图&quot; title=&quot;条形图&quot;&gt;
&lt;p&gt;Matplotlib的&lt;code&gt;plt.bar&lt;/code&gt;方法根据每个数据模型的航空公司平均航线长度&lt;code&gt;（airline_route_lengths[&amp;quot;length&amp;quot;]）&lt;/code&gt;来做图。&lt;/p&gt;
&lt;p&gt;问题是我们想看出哪家航空公司拥有的航线长度是什么并不容易。为了解决这个问题，我们需要能够看到坐标轴标签。这有点难，毕竟有这么多的航空公司。一个能使问题变得简单的方法是使图表具有交互性，这样能实现放大跟缩小来查看轴标签。我们可以使用bokeh库来实现这个－－它能便捷的实现交互性，作出可缩放的图表。&lt;/p&gt;
&lt;p&gt;要使用booked，我们需要先对数据进行预处理：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lookup_name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(row)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Match the row id to the id in the airlines dataframe so we can get the name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = airlines[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;][airlines[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (ValueError, IndexError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Add the index (the airline ids) as a column.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] = airline_route_lengths.index.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Find all the airline names.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;] = airline_route_lengths.apply(lookup_name, axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Remove duplicate values in the index.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths.index = range(airline_route_lengths.shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码会获取&lt;code&gt;airline_route_lengths&lt;/code&gt;中每列的名字，然后添加到&lt;code&gt;name&lt;/code&gt;列上，这里存贮着每个航空公司的名字。我们也添加到&lt;code&gt;id&lt;/code&gt;列上以实现查找（&lt;code&gt;apply&lt;/code&gt;函数不传&lt;code&gt;index&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;最后，我们重置索引序列以得到所有的特殊值。没有这一步，Bokeh 无法正常运行。&lt;/p&gt;
&lt;p&gt;现在，我们可以继续说图表问题：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bokeh.io &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; output_notebook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bokeh.charts &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Bar, show&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output_notebook()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = Bar(airline_route_lengths, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, values=&lt;span class=&quot;string&quot;&gt;&#39;length&#39;&lt;/span&gt;, title=&lt;span class=&quot;string&quot;&gt;&quot;Average airline route lengths&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show(p)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;output_notebook&lt;/code&gt; 创建背景虚化，在 iPython 的 notebook 里画出图。然后，使用数据帧和特定序列制作条形图。最后，显示功能会显示出该图。&lt;br&gt;这个图实际上不是一个图像－－它是一个 JavaScript 插件。因此，我们在下面展示的是一幅屏幕截图，而不是真实的表格。&lt;br&gt;有了它，我们可以放大，看哪一趟航班的飞行路线最长。上面的图像让这些表格看起来挤在了一起，但放大以后，看起来就方便多了。&lt;/p&gt;
&lt;h2 id=&quot;水平条形图&quot;&gt;&lt;a href=&quot;#水平条形图&quot; class=&quot;headerlink&quot; title=&quot;水平条形图&quot;&gt;&lt;/a&gt;水平条形图&lt;/h2&gt;&lt;p&gt;Pygal 是一个能快速制作出有吸引力表格的数据分析库。我们可以用它来按长度分解路由。首先把我们的路由分成短、中、长三个距离，并在 &lt;code&gt;route_lengths&lt;/code&gt; 里计算出它们各占的百分比。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;long_routes = len([k &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; route_lengths &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k &amp;gt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;]) / len(route_lengths)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;medium_routes = len([k &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; route_lengths &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; k &amp;gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;]) / len(route_lengths)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short_routes = len([k &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; route_lengths &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k &amp;lt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;]) / len(route_lengths)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们可以在 Pygal 的水平条形图里把每一个都绘成条形图：&lt;br&gt;&lt;img src=&quot;/2016/05/02/python-data-visualization/7.jpg&quot; alt=&quot;水平条形图&quot; title=&quot;水平条形图&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先，我们创建一个空图。然后，我们添加元素，包括标题和条形图。每个条形图通过百分比值（最大值是100）显示出该类路由的使用频率。&lt;br&gt;最后，我们把图表渲染成文件，用 IPython 的 SVG 功能载入并展示文件。这个图看上去比默认的 matplotlib 图好多了。但是为了制作出这个图，我们要写的代码也多很多。因此，Pygal 可能比较适用于制作小型的展示用图表。&lt;/p&gt;
&lt;h2 id=&quot;散点图&quot;&gt;&lt;a href=&quot;#散点图&quot; class=&quot;headerlink&quot; title=&quot;散点图&quot;&gt;&lt;/a&gt;散点图&lt;/h2&gt;&lt;p&gt;在散点图里，我们能够纵向比较数据。我们可以做一个简单的散点图来比较航空公司的 id 号和航空公司名称的长度：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name_lengths = airlines[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;].apply(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: len(str(x)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(airlines[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;].astype(int), name_lengths)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/8.jpg&quot; alt=&quot;散点图&quot; title=&quot;散点图&quot;&gt;
&lt;p&gt;首先，我们使用 pandas &lt;code&gt;apply&lt;/code&gt; 函数计算每个名称的长度。它将找到每个航空公司的名字字符的数量。然后，我们使用 matplotlib 做一个散点图来比较航空 &lt;code&gt;id&lt;/code&gt; 的长度。当我们绘制时，我们把 &lt;code&gt;airlines&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt; 转换为整数类型。如果我们不这样做是行不通的，因为它需要在 x 轴上的数值。我们可以看到不少的长名字都出现在早先的 &lt;code&gt;id&lt;/code&gt; 中。这可能意味着航空公司在成立前往往有较长的名字。&lt;/p&gt;
&lt;p&gt;我们可以使用 seaborn 验证这个直觉。Seaborn 增强版的散点图，一个联合的点，它显示了两个变量是相关的，并有着类似地分布。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data = pandas.DataFrame(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;lengths&quot;&lt;/span&gt;: name_lengths, &lt;span class=&quot;string&quot;&gt;&quot;ids&quot;&lt;/span&gt;: airlines[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;].astype(int)&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;seaborn.jointplot(x=&lt;span class=&quot;string&quot;&gt;&quot;ids&quot;&lt;/span&gt;, y=&lt;span class=&quot;string&quot;&gt;&quot;lengths&quot;&lt;/span&gt;, data=data)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/9.jpg&quot; alt=&quot;Seaborn 增强版的散点图&quot; title=&quot;Seaborn 增强版的散点图&quot;&gt;
&lt;p&gt;上面的图表明，两个变量之间的相关性是不明确的——r 的平方值是低的。&lt;/p&gt;
&lt;h2 id=&quot;静态-maps&quot;&gt;&lt;a href=&quot;#静态-maps&quot; class=&quot;headerlink&quot; title=&quot;静态 maps&quot;&gt;&lt;/a&gt;静态 maps&lt;/h2&gt;&lt;p&gt;我们的数据天然的适合绘图-机场有经度和纬度对，对于出发和目的机场来说也是。&lt;br&gt;第一张图做的是显示全世界的所有机场。可以用扩展于 matplotlib 的 basemap 来做这个。这允许画世界地图和添加点，而且很容易定制。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Import the basemap package&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; mpl_toolkits.basemap &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Basemap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Create a map on which to draw.  We&#39;re using a mercator projection, and showing the whole world.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m = Basemap(projection=&lt;span class=&quot;string&quot;&gt;&#39;merc&#39;&lt;/span&gt;,llcrnrlat=&lt;span class=&quot;number&quot;&gt;-80&lt;/span&gt;,urcrnrlat=&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,llcrnrlon=&lt;span class=&quot;number&quot;&gt;-180&lt;/span&gt;,urcrnrlon=&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;,lat_ts=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,resolution=&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Draw coastlines, and the edges of the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.drawcoastlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.drawmapboundary()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Convert latitude and longitude to x and y coordinates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x, y = m(list(airports[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;].astype(float)), list(airports[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;].astype(float)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Use matplotlib to draw the points onto the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.scatter(x,y,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,marker=&lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;,color=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Show the plot.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的代码中，首先用 mercator projection 画一个世界地图。墨卡托投影是将整个世界的绘图投射到二位曲面。然后，在地图上用红点点画机场。&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/10.png&quot; alt=&quot;静态 maps&quot; title=&quot;静态 maps&quot;&gt;
&lt;p&gt;上面地图的问题是找到每个机场在哪是困难的-他们就是在机场密度高的区域合并城一团红色斑点。&lt;br&gt;就像聚焦不清楚，有个交互制图的库，folium，可以进行放大地图来帮助我们找到个别的机场。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; folium&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Get a basic world map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports_map = folium.Map(location=[&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], zoom_start=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Draw markers on the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; airports.iterrows():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# For some reason, this one airport causes issues with the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; row[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&quot;South Pole Station&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        airports_map.circle_marker(location=[row[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;], row[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]], popup=row[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Create and show the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports_map.create_map(&lt;span class=&quot;string&quot;&gt;&#39;airports.html&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports_map&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/11.png&quot; alt=&quot;交互式地图&quot; title=&quot;交互式地图&quot;&gt;
&lt;p&gt;Folium 使用 leaflet.js 来制作全交互式地图。你可以点击每一个机场在弹出框中看名字。在上边显示一个截屏，但是实际的地图更令人印象深刻。Folium 也允许非常广阔的修改选项来做更好的标注，或者添加更多的东西到地图上。&lt;/p&gt;
&lt;h2 id=&quot;画弧线&quot;&gt;&lt;a href=&quot;#画弧线&quot; class=&quot;headerlink&quot; title=&quot;画弧线&quot;&gt;&lt;/a&gt;画弧线&lt;/h2&gt;&lt;p&gt;在地图上看到所有的航空路线是很酷的，幸运的是，我们可以使用 basemap 来做这件事。我们将画弧线连接所有的机场出发地和目的地。每个弧线想展示一个段都航线的路径。不幸的是，展示所有的线路又有太多的路由，这将会是一团糟。替代，我们只现实前 3000 个路由。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make a base map with a mercator projection.  Draw the coastlines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m = Basemap(projection=&lt;span class=&quot;string&quot;&gt;&#39;merc&#39;&lt;/span&gt;,llcrnrlat=&lt;span class=&quot;number&quot;&gt;-80&lt;/span&gt;,urcrnrlat=&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,llcrnrlon=&lt;span class=&quot;number&quot;&gt;-180&lt;/span&gt;,urcrnrlon=&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;,lat_ts=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,resolution=&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.drawcoastlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Iterate through the first 3000 rows.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; routes[:&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;].iterrows():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Get the source and dest airports.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = airports[airports[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dest = airports[airports[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;dest_id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Don&#39;t draw overly long routes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; abs(float(source[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]) - float(dest[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;])) &amp;lt; &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# Draw a great circle between source and dest airports.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            m.drawgreatcircle(float(source[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]), float(source[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;]), float(dest[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]), float(dest[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;]),linewidth=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,color=&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (ValueError, IndexError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Show the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/12.jpg&quot; alt=&quot;有弧线的静态图&quot; title=&quot;有弧线的静态图&quot;&gt;
&lt;p&gt;上面的代码将会画一个地图，然后再在地图上画线路。我们添加一了写过滤器来阻止过长的干扰其他路由的长路由。&lt;/p&gt;
&lt;h2 id=&quot;画网络图&quot;&gt;&lt;a href=&quot;#画网络图&quot; class=&quot;headerlink&quot; title=&quot;画网络图&quot;&gt;&lt;/a&gt;画网络图&lt;/h2&gt;&lt;p&gt;我们将做的最终的探索是画一个机场网络图。每个机场将会是网络中的一个节点，并且如果两点之间有路由将划出节点之间的连线。如果有多重路由，将添加线的权重，以显示机场连接的更多。将使用 networkx 库来做这个功能。&lt;/p&gt;
&lt;p&gt;首先，计算机场之间连线的权重。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Initialize the weights dictionary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;weights = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Keep track of keys that have been added once -- we only want edges with a weight of more than 1 to keep our network size manageable.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;added_keys = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Iterate through each route.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; routes.iterrows():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Extract the source and dest airport ids.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    source = row[&lt;span class=&quot;string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dest = row[&lt;span class=&quot;string&quot;&gt;&quot;dest_id&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Create a key for the weights dictionary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# This corresponds to one edge, and has the start and end of the route.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    key = &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;0&amp;#125;_&amp;#123;1&amp;#125;&quot;&lt;/span&gt;.format(source, dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# If the key is already in weights, increment the weight.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; weights:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        weights[key] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# If the key is in added keys, initialize the key in the weights dictionary, with a weight of 2.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; added_keys:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        weights[key] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# If the key isn&#39;t in added_keys yet, append it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# This ensures that we aren&#39;t adding edges with a weight of 1.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        added_keys.append(key)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一旦上面的代码运行，这个权重字典就包含了每两个机场之间权重大于或等于 2 的连线。所以任何机场有两个或者更多连接的路由将会显示出来。&lt;/p&gt;
&lt;p&gt;我们把它画出来：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Import networkx and initialize the graph.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; networkx &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; nx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;graph = nx.Graph()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Keep track of added nodes in this set so we don&#39;t add twice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nodes = set()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Iterate through each edge.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, weight &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; weights.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Split the source and dest ids and convert to integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source, dest = k.split(&lt;span class=&quot;string&quot;&gt;&quot;_&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source, dest = [int(source), int(dest)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Add the source if it isn&#39;t in the nodes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; source &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nodes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            graph.add_node(source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Add the dest if it isn&#39;t in the nodes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dest &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nodes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            graph.add_node(dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Add both source and dest to the nodes set.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Sets don&#39;t allow duplicates.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nodes.add(source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nodes.add(dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Add the edge to the graph.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        graph.add_edge(source, dest, weight=weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (ValueError, IndexError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pos=nx.spring_layout(graph)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Draw the nodes and edges.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nx.draw_networkx_nodes(graph,pos, node_color=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, node_size=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, alpha=&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nx.draw_networkx_edges(graph,pos,width=&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;,alpha=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Show the plot.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/13.png&quot; alt=&quot;网络图&quot; title=&quot;网络图&quot;&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;有一个成长的数据可视化的 Python 库，它可能会制作任意一种可视化。大多数库基于 matplotlib 构建的并且确保一些用例更简单。如果你想更深入的学习怎样使用 matplotlib，seaborn 和其他工具来可视化数据，在这儿检出其他课程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dataquest.io/blog/python-data-visualization-libraries/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文原文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Python 的科学栈相当成熟，各种应用场景都有相关的模块，包括机器学习和数据分析。  &lt;/p&gt;
&lt;p&gt;数据可视化是发现数据和展示结果的重要一环，只不过过去以来，相对于 R 这样的工具，发展还是落后一些。    &lt;/p&gt;
&lt;p&gt;幸运的是，过去几年出现了很多新的Python数据可视化库，弥补了一些这方面的差距。matplotlib 已经成为事实上的数据可视化方面最主要的库，此外还有很多其他库，例如vispy，bokeh， seaborn，  pyga， folium 和 networkx，这些库有些是构建在 matplotlib 之上，还有些有其他一些功能。&lt;/p&gt;
&lt;p&gt;本文会基于一份真实的数据，使用这些库来对数据进行可视化。通过这些对比，我们期望了解每个库所适用的范围，以及如何更好的利用整个 Python 的数据可视化的生态系统。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.vitostack.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.vitostack.com/tags/python/"/>
    
      <category term="数据可视化" scheme="http://www.vitostack.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>两张神图介绍python3和 2.x与 3.x 的区别</title>
    <link href="http://www.vitostack.com/2016/05/02/deffpy2and3/"/>
    <id>http://www.vitostack.com/2016/05/02/deffpy2and3/</id>
    <published>2016-05-01T23:33:29.000Z</published>
    <updated>2016-05-02T10:46:35.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;第一张，py3新特性&lt;br&gt;第二张，py2于py3的区别&lt;br&gt;图片尺寸巨大，请保存后再看。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一张，网上的一张py3新特性&quot;&gt;&lt;a href=&quot;#第一张，网上的一张py3新特性&quot; class=&quot;headerlink&quot; title=&quot;第一张，网上的一张py3新特性&quot;&gt;&lt;/a&gt;第一张，网上的一张py3新特性&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/images/py3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;有感与第一张图-做了第二张图&quot;&gt;&lt;a href=&quot;#有感与第一张图-做了第二张图&quot; class=&quot;headerlink&quot; title=&quot;有感与第一张图, 做了第二张图.&quot;&gt;&lt;/a&gt;有感与第一张图, 做了第二张图.&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/py3-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;第一张，py3新特性&lt;br&gt;第二张，py2于py3的区别&lt;br&gt;图片尺寸巨大，请保存后再看。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一张，网上的一张py3新特性&quot;&gt;&lt;a href=&quot;#第一张，网上的一张py3新特性&quot; class=&quot;headerlink&quot; title=&quot;第一张，网上的一张py3新特性&quot;&gt;&lt;/a&gt;第一张，网上的一张py3新特性&lt;/h2&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.vitostack.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.vitostack.com/tags/python/"/>
    
      <category term="思维导图" scheme="http://www.vitostack.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>开始我的VitoStack博客</title>
    <link href="http://www.vitostack.com/2016/05/01/first-blog/"/>
    <id>http://www.vitostack.com/2016/05/01/first-blog/</id>
    <published>2016-05-01T08:10:16.000Z</published>
    <updated>2016-05-01T18:46:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;h3 id=&quot;琴诗&quot;&gt;&lt;a href=&quot;#琴诗&quot; class=&quot;headerlink&quot; title=&quot;琴诗&quot;&gt;&lt;/a&gt;琴诗&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;若言琴上有琴声，放在匣中何不鸣？&lt;br&gt;若言声在指头上，何不于君指上听？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;听嘉陵江水声寄深上人&quot;&gt;&lt;a href=&quot;#听嘉陵江水声寄深上人&quot; class=&quot;headerlink&quot; title=&quot;听嘉陵江水声寄深上人&quot;&gt;&lt;/a&gt;听嘉陵江水声寄深上人&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;凿岩泄奔湍，称古神禹迹。&lt;br&gt;夜喧山门店，独宿不安席。&lt;br&gt;水性自云静，石中本无声。&lt;br&gt;如何两相激，雷转空山惊？&lt;br&gt;贻之道门旧，了此物我情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;抛两首诗，借古人之口阐述人生的哲学&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;很早以前就想自己搭个个人博客，来 Dump 人生。奈何，奈何，奈若何，言而总之，总而言之这几天五一放假，想去这想去那最后都没去成，所以折腾了一天用基于&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;的&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;框架搭建了一个静态博客。&lt;br&gt;As you know, i’m a developer.so..that’s a piece of cake，ah~&lt;br&gt;以后可能逐步的将 &lt;a href=&quot;http://www.cnblogs.com/Vito2008/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客园&lt;/a&gt; 上的文搬过来。本站致力于分享更多的技术（Technology），&lt;br&gt;目前还在考虑要不要单开一个吐槽的非技术博，看心力吧。&lt;/p&gt;
&lt;p&gt;最后，欢迎关注，欢迎收藏，欢迎rss，欢迎&lt;strong&gt;&lt;a href=&quot;https://github.com/Vito2015/code.vitostack.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fork me on github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;h3 id=&quot;琴诗&quot;&gt;&lt;a href=&quot;#琴诗&quot; class=&quot;headerlink&quot; title=&quot;琴诗&quot;&gt;&lt;/a&gt;琴诗&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;若言琴上有琴声，放在匣中何不鸣？&lt;br&gt;若言声在指头上，何不于君指上听？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="一本正经的人生" scheme="http://www.vitostack.com/categories/%E4%B8%80%E6%9C%AC%E6%AD%A3%E7%BB%8F%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="杂谈" scheme="http://www.vitostack.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="诗词" scheme="http://www.vitostack.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
