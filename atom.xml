<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vito&#39;s TecH sTacK</title>
  <subtitle>vitostack develop</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.vitostack.com/"/>
  <updated>2016-05-02T10:56:28.000Z</updated>
  <id>http://www.vitostack.com/</id>
  
  <author>
    <name>Vito</name>
    <email>vito2015@live.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python数据图表工具多比较</title>
    <link href="http://www.vitostack.com/2016/05/02/python-data-visualization/"/>
    <id>http://www.vitostack.com/2016/05/02/python-data-visualization/</id>
    <published>2016-05-02T06:37:34.000Z</published>
    <updated>2016-05-02T10:56:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Python 的科学栈相当成熟，各种应用场景都有相关的模块，包括机器学习和数据分析。  &lt;/p&gt;
&lt;p&gt;数据可视化是发现数据和展示结果的重要一环，只不过过去以来，相对于 R 这样的工具，发展还是落后一些。    &lt;/p&gt;
&lt;p&gt;幸运的是，过去几年出现了很多新的Python数据可视化库，弥补了一些这方面的差距。matplotlib 已经成为事实上的数据可视化方面最主要的库，此外还有很多其他库，例如vispy，bokeh， seaborn，  pyga， folium 和 networkx，这些库有些是构建在 matplotlib 之上，还有些有其他一些功能。&lt;/p&gt;
&lt;p&gt;本文会基于一份真实的数据，使用这些库来对数据进行可视化。通过这些对比，我们期望了解每个库所适用的范围，以及如何更好的利用整个 Python 的数据可视化的生态系统。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我们在 Dataquest 建了一个交互课程，教你如何使用 Python 的数据可视化工具。如果你打算深入学习，可以点这里。  &lt;/p&gt;
&lt;h2 id=&quot;探索数据集&quot;&gt;&lt;a href=&quot;#探索数据集&quot; class=&quot;headerlink&quot; title=&quot;探索数据集&quot;&gt;&lt;/a&gt;探索数据集&lt;/h2&gt;&lt;p&gt;在我们探讨数据的可视化之前，让我们先来快速的浏览一下我们将要处理的数据集。我们将要使用的数据来自 openflights。我们将要使用航线数据集、机场数据集、航空公司数据集。其中，路径数据的每一行对应的是两个机场之间的飞行路径；机场数据的每一行对应的是世界上的某一个机场，并且给出了相关信息；航空公司的数据的每一行给出的是每一个航空公司。&lt;/p&gt;
&lt;p&gt;首先我们先读取数据：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Import the pandas library.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Read in the airports data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports = pandas.read_csv(&lt;span class=&quot;string&quot;&gt;&quot;airports.csv&quot;&lt;/span&gt;, header=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, dtype=str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports.columns = [&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;city&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;country&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;code&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;icao&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;altitude&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;offset&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dst&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;timezone&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Read in the airlines data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airlines = pandas.read_csv(&lt;span class=&quot;string&quot;&gt;&quot;airlines.csv&quot;&lt;/span&gt;, header=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, dtype=str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airlines.columns = [&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;alias&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;iata&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;icao&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;callsign&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;country&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Read in the routes data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;routes = pandas.read_csv(&lt;span class=&quot;string&quot;&gt;&quot;routes.csv&quot;&lt;/span&gt;, header=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, dtype=str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;routes.columns = [&lt;span class=&quot;string&quot;&gt;&quot;airline&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;airline_id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;source&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dest&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dest_id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;codeshare&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;stops&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;equipment&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些数据没有列的首选项，因此我们通过赋值 &lt;code&gt;column&lt;/code&gt; 属性来添加列的首选项。我们想要将每一列作为字符串进行读取，因为这样做可以简化后续以行 &lt;code&gt;id&lt;/code&gt; 为匹配，对不同的数据框架进行比较的步骤。我们在读取数据时设置了 &lt;code&gt;dtype&lt;/code&gt; 属性值达到这一目的。&lt;/p&gt;
&lt;p&gt;我们可以快速浏览一下每一个数据集的数据框架。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;airports.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;city&lt;/th&gt;
&lt;th&gt;country&lt;/th&gt;
&lt;th&gt;code&lt;/th&gt;
&lt;th&gt;icao&lt;/th&gt;
&lt;th&gt;latitude&lt;/th&gt;
&lt;th&gt;longitude&lt;/th&gt;
&lt;th&gt;altitude&lt;/th&gt;
&lt;th&gt;offset&lt;/th&gt;
&lt;th&gt;dst&lt;/th&gt;
&lt;th&gt;timezone&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Goroka&lt;/td&gt;
&lt;td&gt;Goroka&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;GKA&lt;/td&gt;
&lt;td&gt;AYGA&lt;/td&gt;
&lt;td&gt;-6.081689&lt;/td&gt;
&lt;td&gt;145.391881&lt;/td&gt;
&lt;td&gt;5282&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Madang&lt;/td&gt;
&lt;td&gt;Madang&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;MAG&lt;/td&gt;
&lt;td&gt;AYMD&lt;/td&gt;
&lt;td&gt;-5.207083&lt;/td&gt;
&lt;td&gt;145.788700&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Mount Hagen&lt;/td&gt;
&lt;td&gt;Mount Hagen&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;HGU&lt;/td&gt;
&lt;td&gt;AYMH&lt;/td&gt;
&lt;td&gt;-5.826789&lt;/td&gt;
&lt;td&gt;144.295861&lt;/td&gt;
&lt;td&gt;5388&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Nadzab&lt;/td&gt;
&lt;td&gt;Nadzab&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;LAE&lt;/td&gt;
&lt;td&gt;AYNZ&lt;/td&gt;
&lt;td&gt;-6.569828&lt;/td&gt;
&lt;td&gt;146.726242&lt;/td&gt;
&lt;td&gt;239&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Port Moresby Jacksons Intl&lt;/td&gt;
&lt;td&gt;Port Moresby&lt;/td&gt;
&lt;td&gt;Papua New Guinea&lt;/td&gt;
&lt;td&gt;POM&lt;/td&gt;
&lt;td&gt;AYPY&lt;/td&gt;
&lt;td&gt;-9.443383&lt;/td&gt;
&lt;td&gt;147.220050&lt;/td&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;Pacific/Port_Moresby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;airlines.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;alias&lt;/th&gt;
&lt;th&gt;iata&lt;/th&gt;
&lt;th&gt;icao&lt;/th&gt;
&lt;th&gt;callsign&lt;/th&gt;
&lt;th&gt;country&lt;/th&gt;
&lt;th&gt;active&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Private flight&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;135 Airways&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;GNL&lt;/td&gt;
&lt;td&gt;GENERAL&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1Time Airline&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;1T&lt;/td&gt;
&lt;td&gt;RNX&lt;/td&gt;
&lt;td&gt;NEXTIME&lt;/td&gt;
&lt;td&gt;South Africa&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2 Sqn No 1 Elementary Flying Training School&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;WYT&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;United Kingdom&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;213 Flight Unit&lt;/td&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;TFU&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;Russia&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;routes.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;airline&lt;/th&gt;
&lt;th&gt;airline_id&lt;/th&gt;
&lt;th&gt;source&lt;/th&gt;
&lt;th&gt;source_id&lt;/th&gt;
&lt;th&gt;dest&lt;/th&gt;
&lt;th&gt;dest_id&lt;/th&gt;
&lt;th&gt;codeshare&lt;/th&gt;
&lt;th&gt;stops&lt;/th&gt;
&lt;th&gt;equipment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;AER&lt;/td&gt;
&lt;td&gt;2965&lt;/td&gt;
&lt;td&gt;KZN&lt;/td&gt;
&lt;td&gt;2990&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;ASF&lt;/td&gt;
&lt;td&gt;2966&lt;/td&gt;
&lt;td&gt;KZN&lt;/td&gt;
&lt;td&gt;2990&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;ASF&lt;/td&gt;
&lt;td&gt;2966&lt;/td&gt;
&lt;td&gt;MRV&lt;/td&gt;
&lt;td&gt;2962&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;CEK&lt;/td&gt;
&lt;td&gt;2968&lt;/td&gt;
&lt;td&gt;KZN&lt;/td&gt;
&lt;td&gt;2990&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2B&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;CEK&lt;/td&gt;
&lt;td&gt;2968&lt;/td&gt;
&lt;td&gt;OVB&lt;/td&gt;
&lt;td&gt;4078&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;CR2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以分别对每一个单独的数据集做许多不同有趣的探索，但是只要将它们结合起来分析才能取得最大的收获。Pandas 将会帮助我们分析数据，因为它能够有效的过滤权值或者通过它来应用一些函数。我们将会深入几个有趣的权值因子，比如分析航空公司和航线。&lt;/p&gt;
&lt;p&gt;那么在此之前我们需要做一些数据清洗的工作。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;routes = routes[routes[&lt;span class=&quot;string&quot;&gt;&quot;airline_id&quot;&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&quot;\\N&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一行命令就确保了我们在 airline_id 这一列只含有数值型数据。&lt;/p&gt;
&lt;h2 id=&quot;制作柱状图&quot;&gt;&lt;a href=&quot;#制作柱状图&quot; class=&quot;headerlink&quot; title=&quot;制作柱状图&quot;&gt;&lt;/a&gt;制作柱状图&lt;/h2&gt;&lt;p&gt;现在我们理解了数据的结构，我们可以进一步地开始描点来继续探索这个问题。首先，我们将要使用 matplotlib 这个工具，matplotlib 是一个相对底层的 Python 栈中的描点库，所以它比其他的工具库要多敲一些命令来做出一个好看的曲线。另外一方面，你可以使用 matplotlib 几乎做出任何的曲线，这是因为它十分的灵活，而灵活的代价就是非常难于使用。&lt;/p&gt;
&lt;p&gt;我们首先通过做出一个柱状图来显示不同的航空公司的航线长度分布。一个柱状图将所有的航线的长度分割到不同的值域，然后对落入到不同的值域范围内的航线进行计数。从中我们可以知道哪些航空公司的航线长，哪些航空公司的航线短。&lt;/p&gt;
&lt;p&gt;为了达到这一点，我们需要首先计算一下航线的长度，第一步就要使用距离公式，我们将会使用余弦半正矢距离公式来计算经纬度刻画的两个点之间的距离。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; math&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;haversine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lon1, lat1, lon2, lat2)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Convert coordinates to floats.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lon1, lat1, lon2, lat2 = [float(lon1), float(lat1), float(lon2), float(lat2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Convert to radians from degrees.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Compute distance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dlon = lon2 - lon1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dlat = lat2 - lat1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = math.sin(dlat/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * math.asin(math.sqrt(a)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    km = &lt;span class=&quot;number&quot;&gt;6367&lt;/span&gt; * c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; km&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们就可以使用一个函数来计算起点机场和终点机场之间的单程距离。我们需要从路线数据框架得到机场数据框架所对应的 &lt;code&gt;source_id&lt;/code&gt; 和 &lt;code&gt;dest_id&lt;/code&gt;，然后与机场的数据集的 &lt;code&gt;id&lt;/code&gt; 列相匹配，然后就只要计算就行了，这个函数是这样的：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calc_dist&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(row)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dist = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Match source and destination to get coordinates.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = airports[airports[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dest = airports[airports[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;dest_id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Use coordinates to compute distance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dist = haversine(dest[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;], dest[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;], source[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;], source[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (ValueError, IndexError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;source_id&lt;/code&gt; 和 &lt;code&gt;dest_id&lt;/code&gt; 列没有有效值的话，那么这个函数会报错。因此我们需要增加 &lt;code&gt;try/catch&lt;/code&gt; 模块对这种无效的情况进行捕捉。&lt;/p&gt;
&lt;p&gt;最后，我们将要使用 pandas 来将距离计算的函数运用到 routes 数据框架。这将会使我们得到包含所有的航线线长度的 pandas 序列，其中航线线的长度都是以公里做单位。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;route_lengths = routes.apply(calc_dist, axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在我们就有了航线距离的序列了，我们将会创建一个柱状图，它将会将数据归类到对应的范围之内，然后计数分别有多少的航线落入到不同的每个范围：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.hist(route_lengths, bins=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/4.png&quot; alt=&quot;柱状图&quot; title=&quot;柱状图&quot;&gt;
&lt;p&gt;我们用 &lt;code&gt;import matplotlib.pyplot as plt&lt;/code&gt;导入 matplotlib 描点函数。然后我们就使用 &lt;code&gt;%matplotlib inline&lt;/code&gt;来设置 matplotlib 在 ipython 的 notebook 中描点，最终我们就利用 &lt;code&gt;plt.hist(route_lengths, bins=20)&lt;/code&gt; 得到了一个柱状图。正如我们看到的，航空公司倾向于运行近距离的短程航线，而不是远距离的远程航线。&lt;/p&gt;
&lt;h2 id=&quot;使用-seaborn&quot;&gt;&lt;a href=&quot;#使用-seaborn&quot; class=&quot;headerlink&quot; title=&quot;使用 seaborn&quot;&gt;&lt;/a&gt;使用 seaborn&lt;/h2&gt;&lt;p&gt;我们可以利用 seaborn 来做类似的描点，seaborn 是一个 Python 的高级库。Seaborn 建立在 matplotlib 的基础之上，做一些类型的描点，这些工作常常与简单的统计工作有关。我们可以基于一个核心的概率密度的期望，使用 &lt;code&gt;distplot&lt;/code&gt; 函数来描绘一个柱状图。一个核心的密度期望是一个曲线 —— 本质上是一个比柱状图平滑一点的，更容易看出其中的规律的曲线。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; seaborn &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;seaborn.distplot(route_lengths, bins=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/5.png&quot; alt=&quot;seaborn&quot; title=&quot;seaborn&quot;&gt;
&lt;p&gt;正如你所看到的那样，seaborn 同时有着更加好看的默认风格。seaborn 不含有与每个 matplotlib 的版本相对应的版本，但是它的确是一个很好的快速描点工具，而且相比于 matplotlib 的默认图表可以更好的帮助我们理解数据背后的含义。如果你想更深入的做一些统计方面的工作的话，seaborn 也不失为一个很好的库。&lt;/p&gt;
&lt;h2 id=&quot;条形图&quot;&gt;&lt;a href=&quot;#条形图&quot; class=&quot;headerlink&quot; title=&quot;条形图&quot;&gt;&lt;/a&gt;条形图&lt;/h2&gt;&lt;p&gt;柱状图也虽然很好，但是有时候我们会需要航空公司的平均路线长度。这时候我们可以使用条形图－－每条航线都会有一个单独的状态条，显示航空公司航线的平均长度。从中我们可以看出哪家是国内航空公司哪家是国际航空公司。我们可以使用pandas，一个python的数据分析库，来算出每个航空公司的平均航线长度。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Put relevant columns into a dataframe.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;route_length_df = pandas.DataFrame(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;length&quot;&lt;/span&gt;: route_lengths, &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: routes[&lt;span class=&quot;string&quot;&gt;&quot;airline_id&quot;&lt;/span&gt;]&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Compute the mean route length per airline.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths = route_length_df.groupby(&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;).aggregate(numpy.mean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Sort by length so we can make a better chart.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths = airline_route_lengths.sort(&lt;span class=&quot;string&quot;&gt;&quot;length&quot;&lt;/span&gt;, ascending=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们首先用航线长度和航空公司的id来搭建一个新的数据框架。我们基于&lt;code&gt;airline_id&lt;/code&gt;把&lt;code&gt;route_length_df&lt;/code&gt;拆分成组，为每个航空公司建立一个大体的数据框架。然后我们调用pandas的&lt;code&gt;aggregate&lt;/code&gt;函数来获取航空公司数据框架中长度列的均值，然后把每个获取到的值重组到一个新的数据模型里。之后把数据模型进行排序，这样就使得拥有最多航线的航空公司拍到了前面。&lt;/p&gt;
&lt;p&gt;这样就可以使用matplotlib把结果画出来。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plt.bar(range(airline_route_lengths.shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]), airline_route_lengths[&lt;span class=&quot;string&quot;&gt;&quot;length&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/6.png&quot; alt=&quot;条形图&quot; title=&quot;条形图&quot;&gt;
&lt;p&gt;Matplotlib的&lt;code&gt;plt.bar&lt;/code&gt;方法根据每个数据模型的航空公司平均航线长度&lt;code&gt;（airline_route_lengths[&amp;quot;length&amp;quot;]）&lt;/code&gt;来做图。&lt;/p&gt;
&lt;p&gt;问题是我们想看出哪家航空公司拥有的航线长度是什么并不容易。为了解决这个问题，我们需要能够看到坐标轴标签。这有点难，毕竟有这么多的航空公司。一个能使问题变得简单的方法是使图表具有交互性，这样能实现放大跟缩小来查看轴标签。我们可以使用bokeh库来实现这个－－它能便捷的实现交互性，作出可缩放的图表。&lt;/p&gt;
&lt;p&gt;要使用booked，我们需要先对数据进行预处理：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lookup_name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(row)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Match the row id to the id in the airlines dataframe so we can get the name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = airlines[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;][airlines[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (ValueError, IndexError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Add the index (the airline ids) as a column.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] = airline_route_lengths.index.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Find all the airline names.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;] = airline_route_lengths.apply(lookup_name, axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Remove duplicate values in the index.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airline_route_lengths.index = range(airline_route_lengths.shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码会获取&lt;code&gt;airline_route_lengths&lt;/code&gt;中每列的名字，然后添加到&lt;code&gt;name&lt;/code&gt;列上，这里存贮着每个航空公司的名字。我们也添加到&lt;code&gt;id&lt;/code&gt;列上以实现查找（&lt;code&gt;apply&lt;/code&gt;函数不传&lt;code&gt;index&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;最后，我们重置索引序列以得到所有的特殊值。没有这一步，Bokeh 无法正常运行。&lt;/p&gt;
&lt;p&gt;现在，我们可以继续说图表问题：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bokeh.io &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; output_notebook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bokeh.charts &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Bar, show&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output_notebook()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = Bar(airline_route_lengths, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, values=&lt;span class=&quot;string&quot;&gt;&#39;length&#39;&lt;/span&gt;, title=&lt;span class=&quot;string&quot;&gt;&quot;Average airline route lengths&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show(p)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;output_notebook&lt;/code&gt; 创建背景虚化，在 iPython 的 notebook 里画出图。然后，使用数据帧和特定序列制作条形图。最后，显示功能会显示出该图。&lt;br&gt;这个图实际上不是一个图像－－它是一个 JavaScript 插件。因此，我们在下面展示的是一幅屏幕截图，而不是真实的表格。&lt;br&gt;有了它，我们可以放大，看哪一趟航班的飞行路线最长。上面的图像让这些表格看起来挤在了一起，但放大以后，看起来就方便多了。&lt;/p&gt;
&lt;h2 id=&quot;水平条形图&quot;&gt;&lt;a href=&quot;#水平条形图&quot; class=&quot;headerlink&quot; title=&quot;水平条形图&quot;&gt;&lt;/a&gt;水平条形图&lt;/h2&gt;&lt;p&gt;Pygal 是一个能快速制作出有吸引力表格的数据分析库。我们可以用它来按长度分解路由。首先把我们的路由分成短、中、长三个距离，并在 &lt;code&gt;route_lengths&lt;/code&gt; 里计算出它们各占的百分比。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;long_routes = len([k &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; route_lengths &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k &amp;gt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;]) / len(route_lengths)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;medium_routes = len([k &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; route_lengths &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; k &amp;gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;]) / len(route_lengths)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short_routes = len([k &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; route_lengths &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k &amp;lt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;]) / len(route_lengths)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们可以在 Pygal 的水平条形图里把每一个都绘成条形图：&lt;br&gt;&lt;img src=&quot;/2016/05/02/python-data-visualization/7.jpg&quot; alt=&quot;水平条形图&quot; title=&quot;水平条形图&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先，我们创建一个空图。然后，我们添加元素，包括标题和条形图。每个条形图通过百分比值（最大值是100）显示出该类路由的使用频率。&lt;br&gt;最后，我们把图表渲染成文件，用 IPython 的 SVG 功能载入并展示文件。这个图看上去比默认的 matplotlib 图好多了。但是为了制作出这个图，我们要写的代码也多很多。因此，Pygal 可能比较适用于制作小型的展示用图表。&lt;/p&gt;
&lt;h2 id=&quot;散点图&quot;&gt;&lt;a href=&quot;#散点图&quot; class=&quot;headerlink&quot; title=&quot;散点图&quot;&gt;&lt;/a&gt;散点图&lt;/h2&gt;&lt;p&gt;在散点图里，我们能够纵向比较数据。我们可以做一个简单的散点图来比较航空公司的 id 号和航空公司名称的长度：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name_lengths = airlines[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;].apply(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: len(str(x)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(airlines[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;].astype(int), name_lengths)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/8.jpg&quot; alt=&quot;散点图&quot; title=&quot;散点图&quot;&gt;
&lt;p&gt;首先，我们使用 pandas &lt;code&gt;apply&lt;/code&gt; 函数计算每个名称的长度。它将找到每个航空公司的名字字符的数量。然后，我们使用 matplotlib 做一个散点图来比较航空 &lt;code&gt;id&lt;/code&gt; 的长度。当我们绘制时，我们把 &lt;code&gt;airlines&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt; 转换为整数类型。如果我们不这样做是行不通的，因为它需要在 x 轴上的数值。我们可以看到不少的长名字都出现在早先的 &lt;code&gt;id&lt;/code&gt; 中。这可能意味着航空公司在成立前往往有较长的名字。&lt;/p&gt;
&lt;p&gt;我们可以使用 seaborn 验证这个直觉。Seaborn 增强版的散点图，一个联合的点，它显示了两个变量是相关的，并有着类似地分布。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data = pandas.DataFrame(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;lengths&quot;&lt;/span&gt;: name_lengths, &lt;span class=&quot;string&quot;&gt;&quot;ids&quot;&lt;/span&gt;: airlines[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;].astype(int)&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;seaborn.jointplot(x=&lt;span class=&quot;string&quot;&gt;&quot;ids&quot;&lt;/span&gt;, y=&lt;span class=&quot;string&quot;&gt;&quot;lengths&quot;&lt;/span&gt;, data=data)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/9.jpg&quot; alt=&quot;Seaborn 增强版的散点图&quot; title=&quot;Seaborn 增强版的散点图&quot;&gt;
&lt;p&gt;上面的图表明，两个变量之间的相关性是不明确的——r 的平方值是低的。&lt;/p&gt;
&lt;h2 id=&quot;静态-maps&quot;&gt;&lt;a href=&quot;#静态-maps&quot; class=&quot;headerlink&quot; title=&quot;静态 maps&quot;&gt;&lt;/a&gt;静态 maps&lt;/h2&gt;&lt;p&gt;我们的数据天然的适合绘图-机场有经度和纬度对，对于出发和目的机场来说也是。&lt;br&gt;第一张图做的是显示全世界的所有机场。可以用扩展于 matplotlib 的 basemap 来做这个。这允许画世界地图和添加点，而且很容易定制。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Import the basemap package&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; mpl_toolkits.basemap &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Basemap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Create a map on which to draw.  We&#39;re using a mercator projection, and showing the whole world.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m = Basemap(projection=&lt;span class=&quot;string&quot;&gt;&#39;merc&#39;&lt;/span&gt;,llcrnrlat=&lt;span class=&quot;number&quot;&gt;-80&lt;/span&gt;,urcrnrlat=&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,llcrnrlon=&lt;span class=&quot;number&quot;&gt;-180&lt;/span&gt;,urcrnrlon=&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;,lat_ts=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,resolution=&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Draw coastlines, and the edges of the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.drawcoastlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.drawmapboundary()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Convert latitude and longitude to x and y coordinates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x, y = m(list(airports[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;].astype(float)), list(airports[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;].astype(float)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Use matplotlib to draw the points onto the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.scatter(x,y,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,marker=&lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;,color=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Show the plot.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的代码中，首先用 mercator projection 画一个世界地图。墨卡托投影是将整个世界的绘图投射到二位曲面。然后，在地图上用红点点画机场。&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/10.png&quot; alt=&quot;静态 maps&quot; title=&quot;静态 maps&quot;&gt;
&lt;p&gt;上面地图的问题是找到每个机场在哪是困难的-他们就是在机场密度高的区域合并城一团红色斑点。&lt;br&gt;就像聚焦不清楚，有个交互制图的库，folium，可以进行放大地图来帮助我们找到个别的机场。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; folium&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Get a basic world map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports_map = folium.Map(location=[&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], zoom_start=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Draw markers on the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; airports.iterrows():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# For some reason, this one airport causes issues with the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; row[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&quot;South Pole Station&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        airports_map.circle_marker(location=[row[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;], row[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]], popup=row[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Create and show the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports_map.create_map(&lt;span class=&quot;string&quot;&gt;&#39;airports.html&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airports_map&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/11.png&quot; alt=&quot;交互式地图&quot; title=&quot;交互式地图&quot;&gt;
&lt;p&gt;Folium 使用 leaflet.js 来制作全交互式地图。你可以点击每一个机场在弹出框中看名字。在上边显示一个截屏，但是实际的地图更令人印象深刻。Folium 也允许非常广阔的修改选项来做更好的标注，或者添加更多的东西到地图上。&lt;/p&gt;
&lt;h2 id=&quot;画弧线&quot;&gt;&lt;a href=&quot;#画弧线&quot; class=&quot;headerlink&quot; title=&quot;画弧线&quot;&gt;&lt;/a&gt;画弧线&lt;/h2&gt;&lt;p&gt;在地图上看到所有的航空路线是很酷的，幸运的是，我们可以使用 basemap 来做这件事。我们将画弧线连接所有的机场出发地和目的地。每个弧线想展示一个段都航线的路径。不幸的是，展示所有的线路又有太多的路由，这将会是一团糟。替代，我们只现实前 3000 个路由。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make a base map with a mercator projection.  Draw the coastlines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m = Basemap(projection=&lt;span class=&quot;string&quot;&gt;&#39;merc&#39;&lt;/span&gt;,llcrnrlat=&lt;span class=&quot;number&quot;&gt;-80&lt;/span&gt;,urcrnrlat=&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,llcrnrlon=&lt;span class=&quot;number&quot;&gt;-180&lt;/span&gt;,urcrnrlon=&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;,lat_ts=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,resolution=&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.drawcoastlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Iterate through the first 3000 rows.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; routes[:&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;].iterrows():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Get the source and dest airports.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = airports[airports[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dest = airports[airports[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] == row[&lt;span class=&quot;string&quot;&gt;&quot;dest_id&quot;&lt;/span&gt;]].iloc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Don&#39;t draw overly long routes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; abs(float(source[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]) - float(dest[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;])) &amp;lt; &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# Draw a great circle between source and dest airports.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            m.drawgreatcircle(float(source[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]), float(source[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;]), float(dest[&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]), float(dest[&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;]),linewidth=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,color=&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (ValueError, IndexError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Show the map.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/12.jpg&quot; alt=&quot;有弧线的静态图&quot; title=&quot;有弧线的静态图&quot;&gt;
&lt;p&gt;上面的代码将会画一个地图，然后再在地图上画线路。我们添加一了写过滤器来阻止过长的干扰其他路由的长路由。&lt;/p&gt;
&lt;h2 id=&quot;画网络图&quot;&gt;&lt;a href=&quot;#画网络图&quot; class=&quot;headerlink&quot; title=&quot;画网络图&quot;&gt;&lt;/a&gt;画网络图&lt;/h2&gt;&lt;p&gt;我们将做的最终的探索是画一个机场网络图。每个机场将会是网络中的一个节点，并且如果两点之间有路由将划出节点之间的连线。如果有多重路由，将添加线的权重，以显示机场连接的更多。将使用 networkx 库来做这个功能。&lt;/p&gt;
&lt;p&gt;首先，计算机场之间连线的权重。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Initialize the weights dictionary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;weights = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Keep track of keys that have been added once -- we only want edges with a weight of more than 1 to keep our network size manageable.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;added_keys = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Iterate through each route.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; routes.iterrows():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Extract the source and dest airport ids.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    source = row[&lt;span class=&quot;string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dest = row[&lt;span class=&quot;string&quot;&gt;&quot;dest_id&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Create a key for the weights dictionary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# This corresponds to one edge, and has the start and end of the route.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    key = &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;0&amp;#125;_&amp;#123;1&amp;#125;&quot;&lt;/span&gt;.format(source, dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# If the key is already in weights, increment the weight.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; weights:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        weights[key] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# If the key is in added keys, initialize the key in the weights dictionary, with a weight of 2.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; added_keys:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        weights[key] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# If the key isn&#39;t in added_keys yet, append it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# This ensures that we aren&#39;t adding edges with a weight of 1.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        added_keys.append(key)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一旦上面的代码运行，这个权重字典就包含了每两个机场之间权重大于或等于 2 的连线。所以任何机场有两个或者更多连接的路由将会显示出来。&lt;/p&gt;
&lt;p&gt;我们把它画出来：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Import networkx and initialize the graph.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; networkx &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; nx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;graph = nx.Graph()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Keep track of added nodes in this set so we don&#39;t add twice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nodes = set()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Iterate through each edge.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, weight &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; weights.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Split the source and dest ids and convert to integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source, dest = k.split(&lt;span class=&quot;string&quot;&gt;&quot;_&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source, dest = [int(source), int(dest)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Add the source if it isn&#39;t in the nodes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; source &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nodes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            graph.add_node(source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Add the dest if it isn&#39;t in the nodes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dest &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nodes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            graph.add_node(dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Add both source and dest to the nodes set.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Sets don&#39;t allow duplicates.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nodes.add(source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nodes.add(dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Add the edge to the graph.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        graph.add_edge(source, dest, weight=weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (ValueError, IndexError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pos=nx.spring_layout(graph)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Draw the nodes and edges.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nx.draw_networkx_nodes(graph,pos, node_color=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, node_size=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, alpha=&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nx.draw_networkx_edges(graph,pos,width=&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;,alpha=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Show the plot.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/05/02/python-data-visualization/13.png&quot; alt=&quot;网络图&quot; title=&quot;网络图&quot;&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;有一个成长的数据可视化的 Python 库，它可能会制作任意一种可视化。大多数库基于 matplotlib 构建的并且确保一些用例更简单。如果你想更深入的学习怎样使用 matplotlib，seaborn 和其他工具来可视化数据，在这儿检出其他课程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dataquest.io/blog/python-data-visualization-libraries/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文原文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Python 的科学栈相当成熟，各种应用场景都有相关的模块，包括机器学习和数据分析。  &lt;/p&gt;
&lt;p&gt;数据可视化是发现数据和展示结果的重要一环，只不过过去以来，相对于 R 这样的工具，发展还是落后一些。    &lt;/p&gt;
&lt;p&gt;幸运的是，过去几年出现了很多新的Python数据可视化库，弥补了一些这方面的差距。matplotlib 已经成为事实上的数据可视化方面最主要的库，此外还有很多其他库，例如vispy，bokeh， seaborn，  pyga， folium 和 networkx，这些库有些是构建在 matplotlib 之上，还有些有其他一些功能。&lt;/p&gt;
&lt;p&gt;本文会基于一份真实的数据，使用这些库来对数据进行可视化。通过这些对比，我们期望了解每个库所适用的范围，以及如何更好的利用整个 Python 的数据可视化的生态系统。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.vitostack.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.vitostack.com/tags/python/"/>
    
      <category term="数据可视化" scheme="http://www.vitostack.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>两张神图介绍python3和 2.x与 3.x 的区别</title>
    <link href="http://www.vitostack.com/2016/05/02/deffpy2and3/"/>
    <id>http://www.vitostack.com/2016/05/02/deffpy2and3/</id>
    <published>2016-05-01T23:33:29.000Z</published>
    <updated>2016-05-02T10:46:35.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;第一张，py3新特性&lt;br&gt;第二张，py2于py3的区别&lt;br&gt;图片尺寸巨大，请保存后再看。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一张，网上的一张py3新特性&quot;&gt;&lt;a href=&quot;#第一张，网上的一张py3新特性&quot; class=&quot;headerlink&quot; title=&quot;第一张，网上的一张py3新特性&quot;&gt;&lt;/a&gt;第一张，网上的一张py3新特性&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/images/py3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;有感与第一张图-做了第二张图&quot;&gt;&lt;a href=&quot;#有感与第一张图-做了第二张图&quot; class=&quot;headerlink&quot; title=&quot;有感与第一张图, 做了第二张图.&quot;&gt;&lt;/a&gt;有感与第一张图, 做了第二张图.&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/py3-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;第一张，py3新特性&lt;br&gt;第二张，py2于py3的区别&lt;br&gt;图片尺寸巨大，请保存后再看。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一张，网上的一张py3新特性&quot;&gt;&lt;a href=&quot;#第一张，网上的一张py3新特性&quot; class=&quot;headerlink&quot; title=&quot;第一张，网上的一张py3新特性&quot;&gt;&lt;/a&gt;第一张，网上的一张py3新特性&lt;/h2&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.vitostack.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.vitostack.com/tags/python/"/>
    
      <category term="思维导图" scheme="http://www.vitostack.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>开始我的VitoStack博客</title>
    <link href="http://www.vitostack.com/2016/05/01/first-blog/"/>
    <id>http://www.vitostack.com/2016/05/01/first-blog/</id>
    <published>2016-05-01T08:10:16.000Z</published>
    <updated>2016-05-01T18:46:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;h3 id=&quot;琴诗&quot;&gt;&lt;a href=&quot;#琴诗&quot; class=&quot;headerlink&quot; title=&quot;琴诗&quot;&gt;&lt;/a&gt;琴诗&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;若言琴上有琴声，放在匣中何不鸣？&lt;br&gt;若言声在指头上，何不于君指上听？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;听嘉陵江水声寄深上人&quot;&gt;&lt;a href=&quot;#听嘉陵江水声寄深上人&quot; class=&quot;headerlink&quot; title=&quot;听嘉陵江水声寄深上人&quot;&gt;&lt;/a&gt;听嘉陵江水声寄深上人&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;凿岩泄奔湍，称古神禹迹。&lt;br&gt;夜喧山门店，独宿不安席。&lt;br&gt;水性自云静，石中本无声。&lt;br&gt;如何两相激，雷转空山惊？&lt;br&gt;贻之道门旧，了此物我情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;抛两首诗，借古人之口阐述人生的哲学&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;很早以前就想自己搭个个人博客，来 Dump 人生。奈何，奈何，奈若何，言而总之，总而言之这几天五一放假，想去这想去那最后都没去成，所以折腾了一天用基于&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;的&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;框架搭建了一个静态博客。&lt;br&gt;As you know, i’m a developer.so..that’s a piece of cake，ah~&lt;br&gt;以后可能逐步的将 &lt;a href=&quot;http://www.cnblogs.com/Vito2008/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客园&lt;/a&gt; 上的文搬过来。本站致力于分享更多的技术（Technology），&lt;br&gt;目前还在考虑要不要单开一个吐槽的非技术博，看心力吧。&lt;/p&gt;
&lt;p&gt;最后，欢迎关注，欢迎收藏，欢迎rss，欢迎&lt;strong&gt;&lt;a href=&quot;https://github.com/Vito2015/code.vitostack.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fork me on github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;h3 id=&quot;琴诗&quot;&gt;&lt;a href=&quot;#琴诗&quot; class=&quot;headerlink&quot; title=&quot;琴诗&quot;&gt;&lt;/a&gt;琴诗&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;若言琴上有琴声，放在匣中何不鸣？&lt;br&gt;若言声在指头上，何不于君指上听？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="一本正经的人生" scheme="http://www.vitostack.com/categories/%E4%B8%80%E6%9C%AC%E6%AD%A3%E7%BB%8F%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="杂谈" scheme="http://www.vitostack.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="诗词" scheme="http://www.vitostack.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
